宽度有限搜索BFS

什么时候应该使用BFS? 图的遍历 Traversal in Graph
    1 层级遍历 Level Order Traversal
    2 由点及面 Connected Component
    3 拓扑排序 Topological Sorting
最短路径 Shortest Path in Simple Graph
    1 仅限简单图求最短路径
    2 即，图中每条边长度都是1，且没有方向

1，使用队列作为主要的数据结构 Queue
思考:用栈(Stack)是否可行?为什么行 or 为什么不行? 
2，是否需要实现分层?
3，需要分层的算法比不需要分层的算法多一个循环 size=queue.size()
如果直接 for (int i = 0; i < queue.size(); i++) 会怎么样?

什么时候需要序列化?
1. 将内存中的数据持久化存储时
内存中重要的数据不能只是呆在内存里，这样断电就没有了，所需需要用一种方式写入硬盘，在需要的 时候，能否再从硬盘中读出来在内存中重新创建
2. 网络传输时 机器与机器之间交换数据的时候，不可能互相去读对方的内存。只能讲数据变成字符流数据(字符串)后
通过网络传输过去。接受的一方再将字符串解析后到内存中。
常用的一些序列化手段:
• XML
• Json
• Thrift (by Facebook)
• ProtoBuf (by Google)

一些序列化的例子:
• 比如一个数组，里面都是整数，我们可以简单的序列化为”[1,2,3]”
• 一个整数链表，我们可以序列化为，”1->2->3”
• 一个哈希表(HashMap)，我们可以序列化为，”{\”key\”: \”value\”}”
序列化算法设计时需要考虑的因素:
• 压缩率。对于网络传输和磁盘存储而言，当然希望更节省。
• 如 Thrift, ProtoBuf 都是为了更快的传输数据和节省存储空间而设计的。
• 可读性。我们希望开发人员，能够通过序列化后的数据直接看懂原始数据是什么。
• 如 Json，LintCode 的输入数据

69. 二叉树的层次遍历
给出一棵二叉树，返回其节点值的层次遍历（逐层从左往右访问）
样例
输入：{1,2,3}
输出：[[1],[2,3]]
解释：
   1
  / \
 2   3
它将被序列化为{1,2,3}
层次遍历

// 思路：从根节点开始先offer进队列中，然后poll出队列头部节点保存值临时list中，同时找到其左右子树存入队列
// ，记住：循环的次数是根据上一成节点数
public class Solution {
    /**
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */
    public List<List<Integer>> levelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        // BFS标志语句while(!queue.isEmpty()), 
        // 同时注意int size = queue.size()必须要有，该变量记录了当前层所含节点数量
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> currentList = new ArrayList<>();
            for(int i = 0; i < size; i++) {
                TreeNode curNode = queue.poll();
                currentList.add(curNode.val);
                if(curNode.left != null) {
                    queue.offer(curNode.left);
                }
                if(curNode.right != null) {
                    queue.offer(curNode.right);
                }
            }
            result.add(currentList);
        }
        return result;
    }
}


70. 二叉树的层次遍历 II
给出一棵二叉树，返回其节点值从底向上的层次序遍历（按从叶节点所在层到根节点所在的层遍历，然后逐层从左往右遍历）

样例

输入:
{3,9,20,#,#,15,7}
输出:
[[15,7],[9,20],[3]]
解释:
    3
   / \
  9  20
    /  \
   15   7
它将被序列化为 {3,9,20,#,#,15,7}
层次遍历

思路： 按照正常的从上到下遍历后，使用cellections.reverse取反之后直接返回即可

public class Solution {
    /**
     * @param root: A tree
     * @return: buttom-up level order a list of lists of integer
     */
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        if(root == null) {
            return result;
        }
        queue.offer(root);
        while(!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> cur = new ArrayList<>();
            for(int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                cur.add(node.val);
                if(node.left != null) {
                    queue.offer(node.left);
                }
                if(node.right != null){
                    queue.offer(node.right);
                }
            }
            result.add(cur);
        }
        // 返回之前使用对结果取反即可
        Collections.reverse(result);
        return result;
    }
}



71. 二叉树的锯齿形层次遍历
给出一棵二叉树，返回其节点值的锯齿形层次遍历（先从左往右，下一层再从右往左，层与层之间交替进行） 

样例

输入:{3,9,20,#,#,15,7}
输出:[[3],[20,9],[15,7]]
解释:
    3
   / \
  9  20
    /  \
   15   7
它将被序列化为 {3,9,20,#,#,15,7}

思路：在普通的层次遍历中加入一个标志位，遍历下一行时从list的头插入

public class Solution {
    /**
     * @param root: A Tree
     * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
     */
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean isReverse = true;
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> cur = new ArrayList<>();
            for(int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                // 将队列poll出来的是放入cur中
                if(isReverse) {
                    cur.add(node.val);
                }else {
                    cur.add(0, node.val);
                }
                if(node.left != null) {
                    queue.offer(node.left);
                }
                if(node.right != null) {
                    queue.offer(node.right);
                }
            }
            result.add(cur);
            isReverse = isReverse ? false : true;
        }
        return result;
    }
}


7. 二叉树的序列化和反序列化
设计一个算法，并编写代码来序列化和反序列化二叉树。将树写入一个文件被称为“序列化”，读取文件后重建同样的二叉树被称为“反序列化”。

如何反序列化或序列化二叉树是没有限制的，你只需要确保可以将二叉树序列化为一个字符串，并且可以将字符串反序列化为原来的树结构。

样例

输入：{3,9,20,#,#,15,7}
输出：{3,9,20,#,#,15,7}
解释：
二叉树 {3,9,20,#,#,15,7}，表示如下的树结构：
	  3
	 / \
	9  20
	  /  \
	 15   7
它将被序列化为 {3,9,20,#,#,15,7}

public class Solution {
    public String serialize(TreeNode root) {
        // write your code here
        if(root == null) {
            return "";
        }
        return serializeHelper(root);
    }
    
    private String serializeHelper(TreeNode root) {
        if(root == null) {
            return "#,";
        }
        String leftStr = serializeHelper(root.left);
        String rightStr = serializeHelper(root.right);
        return root.val + "," + leftStr + rightStr;
    }

    public TreeNode deserialize(String data) {
        // write your code here
        if (data == null || data.isEmpty()) {
             return null;
        }
        Queue<String> queue = new LinkedList<>(Arrays.asList(data.split(",")));
        return deserializeHelper(queue);
    }
    
    private TreeNode deserializeHelper(Queue<String> queue){
        String value = queue.poll();
        if(value.equals("#")){
            return null;
        }
        TreeNode node = new TreeNode(Integer.parseInt(value));
        node.left = deserializeHelper(queue);
        node.right = deserializeHelper(queue);
        return node;
    }
}

242. 将二叉树按照层级转化为链表
给一棵二叉树，设计一个算法为每一层的节点建立一个链表。也就是说，如果一棵二叉树有 D 层，那么你需要创建 D 条链表。

样例
样例 1:

输入: {1,2,3,4}
输出: [1->null,2->3->null,4->null]
解释: 
        1
       / \
      2   3
     /
    4

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

public class Solution {
    /**
     * @param root the root of binary tree
     * @return a lists of linked list
     */
    public List<ListNode> binaryTreeToLists(TreeNode root) {
        // Write your code here
        // for循环里面的每一个遍历都是对同一层级的数据进行遍历的，所以可以在for里面做处理
        List<ListNode> result = new ArrayList<>();
        if(root == null) {
            return result;
        }
        ListNode dummy = new ListNode(0);
        ListNode lastNode = null;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()) {
            dummy.next = null;
            lastNode = dummy;
            int size = queue.size();
            for(int i = 0; i < size; i++) {
      	 // 使用一个临时变量来记录上一个，以便下一次使用
                TreeNode head = queue.poll();
                lastNode.next = new ListNode(head.val);
                lastNode = lastNode.next;
                if(head.left != null) {
                    queue.offer(head.left);
                }
                if(head.right != null) {
                    queue.offer(head.right);
                }
            }
            result.add(dummy.next);
        }
        return result;
    }
}

512 01矩阵问题
给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。

两个相邻元素间的距离为 1 。

示例 1:
输入:

0 0 0
0 1 0
0 0 0
输出:

0 0 0
0 1 0
0 0 0

// 思路：通过0找1比较方便，如果一个0节点的邻居节点还是0，那么节点1最近的0节点肯定不是当前这个0，例如：【0，0，1】最
// 最左边节点0的右边还是一个0，那么节点1的最近0节点肯定不是最左边0，因为中间0离1是最近的
// A点上面点B > A + 1 可以推出 MAX > 0 + 1 则说明B点的最近0节点的路径为长度可以加1，即：B = A + 1；
class Solution {
    public  int[][] updateMatrix(int[][] matrix)
    {
        int m = matrix.length;
        int n = matrix[0].length;

        Queue<int[]> queue = new LinkedList<>();
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) {
                    queue.offer(new int[] {i, j});
                }
                else {
                    matrix[i][j] = Integer.MAX_VALUE; // 将所有的节点1换成无穷大
                }
            }
        }
        int[] xAxsi = {-1, 1, 0 ,0};//上下左右四个点离当前点的距离
        int[] yAxsi = {0, 0, -1 ,1};
        while (!queue.isEmpty()){
            int[] unit=queue.poll();
            for(int i = 0; i < 4; i++){
                int x=unit[0]+xAxsi[i];
                int y=unit[1]+yAxsi[i];
                // ***节点A值： A + 1 > A的邻居节点，说明A的邻居节点是0，
                if (x < 0 || x >= m || y < 0 || y >= n || matrix[x][y] <= matrix[unit[0]][unit[1]]+1)
                    continue;
                queue.offer(new int[]{x,y});
                // 走到这里说新节点就是1，而他附近就是节点0
                matrix[x][y]=matrix[unit[0]][unit[1]]+1;
            }
        }
        return matrix;
    }
}

1162，你现在手里有一份大小为 N x N 的『地图』（网格） grid，上面的每个『区域』（单元格）都用 0 和 1 标记好了。其中 0 代表海洋，1 代表陆地，
你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。
我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：(x0, y0) 和 (x1, y1) 这两个区域之间的距离是 |x0 - x1| + |y0 - y1| 。
如果我们的地图上只有陆地或者海洋，请返回 -1。

示例 1：

输入：[[1,0,1],[0,0,0],[1,0,1]]
输出：2
解释： 
海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。

// 思路：这种题如果忘记了具体思路就哪一个简单例子跑一遍即可，
// 具体思路其就是反过来通过陆地找海洋， 一旦陆地周围有海洋就将当前二维数组的海洋位置的值置为1 + 1， 
// 那么这个海洋周围如果还有其他的陆地就不用管换这个方向上的海洋了，同时将已经染色的海洋位置如队列，最后返总长 - 1即可；
class Point{
    int x;
    int y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    public int maxDistance(int[][] grid) {
        if(grid == null) {
            return -1;
        }
        // 将所有的陆地存储在队列中
        Queue<Point> queue = new LinkedList<>();
        int row = grid.length;
        int colum = grid[0].length;
        for(int i = 0; i < row; i++){
            for(int j = 0; j < colum; j++) {
                if(grid[i][j] == 1) {
                    queue.offer(new Point(i, j));
                }
            }
        }
        // 判断是否全为陆地或者海洋
        if(queue.size() == row * colum || queue.size() == 0) {
            return -1;
        }
        int val = 1;
        int[]xDir = {-1, 1, 0, 0};
        int[]yDir = {0, 0, -1, 1};
        while(!queue.isEmpty()) {
            Point curPoint = queue.poll();
            val = grid[curPoint.x][curPoint.y];
            for(int i = 0; i < 4; i++) {
                int newX = curPoint.x + xDir[i];
                int newY = curPoint.y + yDir[i];
                // 这里要使用大于等于
                if(newX < 0 || newX >= row || newY < 0 || newY >= colum) {
                    continue;
                }
                if(grid[newX][newY] == 0) {
                    grid[newX][newY] = val + 1;
                    queue.offer(new Point(newX, newY));
                }
            }
        }
        return val - 1;
    }
}
127. 单词接龙I
给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回 0。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出: 5

解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
     返回它的长度 5。
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(beginWord.equals(endWord)){
            return 1;
        }
        if(wordList == null || wordList.size() == 0) {
            return 0;
        }
        if(!wordList.contains(endWord)){
            return 0;
        }
        Queue<String> queue = new LinkedList<>();
        Set<String> set = new HashSet<>();
        queue.offer(beginWord);
        set.add(beginWord);
        int count = 1;
        while(!queue.isEmpty()) {
            count++;
            int size = queue.size();
            for(int i = 0; i < size; i++){
                String head = queue.poll();
                // 找到wordList里面所有符合要求的单词--只有一个字母不一样的
                for(String str : getQualifiedWords(head, wordList)){
                    // 判断找到的单词是否已经被遍历过了--通过在set里面找
                    if(set.contains(str)){
                        continue;
                    }
                    // 退出条件，结束单词和当前单词一样
                    if(endWord.equals(str)){
                        return count;
                    }
                    set.add(str);
                    queue.offer(str);
                }
            }
        }
        return 0;   
    }

    private List<String> getQualifiedWords(String head, List<String> wordList) {
        List<String> result = new ArrayList<>();
        // 超过一个字母不一样的即不符合要求
        for(String str : wordList){
            int count = 0;
            for(int i = 0; i < head.length(); i++){
                if(head.charAt(i) != str.charAt(i)){
                    count++;
                }
            }
            if(count <= 1){
                result.add(str);
            }
        }
        return result;
    }
}



126. 单词接龙 II
给定两个单词（beginWord 和 endWord）和一个字典 wordList，找出所有从 beginWord 到 endWord 的最短转换序列。转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
说明:

如果不存在这样的转换序列，返回一个空列表。
所有单词具有相同的长度。
所有单词只由小写字母组成。
字典中不存在重复的单词。
你可以假设 beginWord 和 endWord 是非空的，且二者不相同。
示例 1:

输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出:
[
  ["hit","hot","dot","dog","cog"],
  ["hit","hot","lot","log","cog"]
]

// 思路：
// 在单词接龙的基础上，需要将找到的最短路径存储下来；
// 之前的队列只用来存储每层的元素，那么现在就得存储每层添加元素之后的结果："ab","if",{"cd","af","ib","if"}；
// （1）第一层：{"ab"}
// （2）第二层：{"ab","af"}、{"ab","ib"}
// （3）第三层：{"ab","af","if"}、{"ab","ib","if"}
// 如果该层添加的某一个单词符合目标单词，则该路径为最短路径，该层为最短路径所在的层，但此时不能直接返回结果，必须将该层遍历完，将该层所有符合的结果都添加进结果集；
// 每层添加单词的时候，不能直接添加到总的已访问单词集合中，需要每层有一个单独的该层访问的单词集，该层结束之后，再会合到总的已访问单词集合中，原因就是因为3.
// 注意:如果使用的每一层的所有的待选路径所接的下一单词都记录在同一个tempSet中，如果放错位置就会导致最终数据缺失部分，因为不同路劲在循环的时候访问过的单词提前
// 记录在tempSet中会影响到下一次循环
class Solution {
    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {
        List<List<String>> result = new ArrayList<>();
        if(wordList != null && !wordList.contains(endWord)) {
            return result;
        }
        Queue<List<String>> queue = new LinkedList<>();
        
        Set<String> visited = new HashSet<>();
        // 将wordList转化为set，方便后期做排查单词是否存在
        Set<String> dictionary = new HashSet<>(wordList);
        // 初始化队列
        queue.offer(Arrays.asList(beginWord));
        // 第一个单词访问过后需要记录下来
        visited.add(beginWord);
        boolean flag = false;
        while(!queue.isEmpty() && !flag) {
            int size = queue.size();
            // 除了visited记录已经访问过的单词，上一步poll出来的所有层所访问的单词都要记录下来，最后一并存放到visited中
            Set<String> tempSet = new HashSet<>();
            // 当前一共记录了size大小个路径了，现在获取每一种情况的最后一个单词并且开始找相似的单词
            for(int i = 0; i < size; i++) {
                List<String> head = queue.poll();
                // 找到最后一个单词
                String lastWord = head.get(head.size() - 1);
                // 通过getQualifiedWords这个方法找到所有满足的单词
                List<String> qualifiedWords = getQualifiedWords(lastWord, wordList);
                for(String str : qualifiedWords) {
                    if(!dictionary.contains(str) || visited.contains(str)) {
                        continue;
                    }
                    // 找到的所有单词如果没有访问过就可以直接加上新单词后加入到queue中去
                    // 注意：要是用深度拷贝
                    List<String> tempList = new ArrayList<>(head);
                    tempList.add(str);
                    // 如果新找到的单词为endWord说明已经找到了最短的
                    if(endWord.equals(str)) {
                        // flag 表示找到了最短路径，即为当前层head为最短路径
                        flag = true;
                        result.add(tempList);
                        continue;
                    }
                    queue.offer(tempList);
                    tempSet.add(str);
                }
            }
            visited.addAll(tempSet);
        }
        return result;

    }
    
    // 如果使用这种方法进行匹配单词过滤，当list里面参数过长会导致代码超时
    // 解决的办法是使用26个字母进行获取匹配单词
    private List<String> getQualifiedWords(String head, List<String> wordList) {
        List<String> result = new ArrayList<>();
        // 超过一个字母不一样的即不符合要求
        for(String str : wordList){
            int count = 0;
            for(int i = 0; i < head.length(); i++){
                if(head.charAt(i) != str.charAt(i)){
                    count++;
                }
            }
            if(count <= 1){
                result.add(str);
            }
        }
        return result;
    }
}

178. 图是否是树
给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树

样例
样例 1:

输入: n = 5 edges = [[0, 1], [0, 2], [0, 3], [1, 4]]
输出: true.
样例 2:

输入: n = 5 edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]]
输出: false.

public class Solution {
    /**
     * @param n: An integer
     * @param edges: a list of undirected edges
     * @return: true if it's a valid tree, or false
     */
     // 1,所有的节点联通，2，边数 = 节点数 - 1；
    public boolean validTree(int n, int[][] edges) {
        // write your code here
        if(n == 0) {
            return false;
        }
        if(edges.length != n - 1) {
            return false;
        }
        // 这里进行判别n个点是否都联通起来的
        // 将二维数组转为map表达
        Map<Integer, List<Integer>> graph = getGraph(n, edges);
        // 记录那些节点是联通的
        Set<Integer> set = new HashSet<>();
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(0);
        set.add(0);
        while(!queue.isEmpty()){
                Integer cur = queue.poll();
                for(Integer neighbor : graph.get(cur)){
                    if(set.contains(neighbor)){
                        continue;
                    }
                    queue.offer(neighbor);
                    set.add(neighbor);
                }
        }
        return n == set.size();
    }
    private Map<Integer, List<Integer>> getGraph(int n, int[][] edges) {
        Map<Integer, List<Integer>> result = new HashMap<>();
        for(int i = 0; i< n; i++) {
            result.put(i, new ArrayList<Integer>());
        }
        for(int i = 0; i < edges.length; i++) {
            int c = edges[i][0];
            int d = edges[i][1];
            result.get(c).add(d);
            result.get(d).add(c);
        }
        return result;
        
    }
}

317. 离建筑物最近的距离
给出一个二维的网格，每一格可以代表墙 2 ，房子 1，以及空 0 (用数字0,1,2来表示)，在网格中找到一个位置去建立邮局，使得所有的房子到邮局的距离和是最小的。
返回所有房子到邮局的最小距离和，如果没有地方建立邮局，则返回-1.

你不能穿过房子和墙，只能穿过空地。
你只能在空地建立邮局。
 
样例
样例 1:

输入：[[0,1,0,0,0],[1,0,0,2,1],[0,1,0,0,0]]
输出：8
解释： 在(1,1)处建立邮局，所有房子到邮局的距离和是最小的。


// 思路：使用一个int二维数组记录从所有房子出发访问每个空地的总长度，同时使用一个int二位数组记录， 
// 某个空白地一共被多少个房子访问过，如果被访问过的次数小于总房子数,说明此空白位置不符合要求
// 注意：从某个房子出发每往外发散一次算是一层，在这一层中需要记录当前层的上下所有四个节点是否被访问过，不然会出现死循环

class Coordinate{
    int x; 
    int y;
    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class Solution {
    public int EMPTY = 0;
    public int HOUSE = 1;
    public int WALL = 2;
    public int n;
    public int m;
    public int[][] grid;
    //四个方向
    public int[] directionX = {0, 0, 1, -1};
    public int[] directionY = {1, -1, 0, 0};

    //初始化n, m, grid
    private void setGrid(int[][] grid) {
        this.n = grid.length;
        this.m = grid[0].length;
        this.grid = grid;
    }

    //获取1，0的坐标序列
    private List<Coordinate> getCoordinates(int type) {
        List<Coordinate> coordinates = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == type) {
                    coordinates.add(new Coordinate(i, j));
                }
            }
        }
        return coordinates;
    }

    //判断坐标是否valid
    private boolean inBound(int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 0;
    }

    public void helper(int x, int y, int[][] distanceSum, int[][] visited) {
       
        // 声明一个二维数组记录当前某一个房屋下是否已经对某一个空地访问过了
        boolean [][] tempVisited = new boolean [n][m];
        Queue<Coordinate> queue = new LinkedList<>();
        queue.offer(new Coordinate(x, y));
        tempVisited[x][y] = true;
        int step = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            // 以【x，y】节点为中心向四周发散，寻找空地，每往外发散一次代表一层
            step++;
            for(int i = 0; i < size; i++) {
                Coordinate coor = queue.poll();
                // 上下左右寻找空地位置
                for(int j = 0; j < 4; j++) {
                    Coordinate neighbor = new Coordinate(
                        coor.x + directionX[j],
                        coor.y + directionY[j]
                    );
                    // 检查是否越界以及当前位置是否为空地
                    if (!inBound(neighbor.x, neighbor.y)) {
                        continue;
                    }
                    // 处于当前层的环境下判断某个点是否访问过，只能访问没有访问过的点
                    if (tempVisited[neighbor.x][neighbor.y]) {
                        continue;
                    }
                    queue.offer(neighbor);
                    tempVisited[neighbor.x][neighbor.y] = true;
                    distanceSum[neighbor.x][neighbor.y] += step;
                    visited[neighbor.x][neighbor.y]++;
                }
            }
        }
    }

    public int shortestDistance(int[][] grid) {
        if(grid == null) {
            return -1;
        }
        setGrid(grid);

        // 获得所有的房屋的坐标
        List<Coordinate> houses = getCoordinates(HOUSE);

        // 声明累加数组，此数组用来记录从每个建筑物出发到达某一个空地的距离和，最后从这里面取一个最小的位置就是目标位置
        int[][] distanceSum = new int[n][m];
        // 记录每个空地被访问过的次数，如果某个空地访问次数小于所有建筑物数量，说明真个空地不是所有的建筑物可以到达的，所以放弃当前空地修建大厦
        int[][] visited = new int[n][m];
        for(Coordinate house : houses) {
            helper(house.x, house.y, distanceSum, visited);
        }
        // 到达这里的时候说明所有建筑物已经访问过所有的空地了，同时二维数组distanceSum已经记录了从所有建筑物到达某一个空地的距离
        int min = Integer.MAX_VALUE;
        List<Coordinate> emptys = getCoordinates(EMPTY);
        for(Coordinate empty :emptys) {
            if(visited[empty.x][empty.y] != houses.size()){
                    continue;
                }
            min = Math.min(min, distanceSum[empty.x][empty.y]);
        }
        return min == Integer.MAX_VALUE ? -1 : min;
    }
}