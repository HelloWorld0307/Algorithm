
HashMap原理


146 运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥不存在，则写入其数据值。当缓存容量达到上限时，它应该在写入新数据之前删除最近最少使用的数据值，从而为新的数据值留出空间。

进阶:

你是否可以在 O(1) 时间复杂度内完成这两种操作？

示例:

LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // 返回  1
cache.put(3, 3);    // 该操作会使得密钥 2 作废
cache.get(2);       // 返回 -1 (未找到)
cache.put(4, 4);    // 该操作会使得密钥 1 作废
cache.get(1);       // 返回 -1 (未找到)
cache.get(3);       // 返回  3
cache.get(4);       // 返回  4


// HashMap + 双向链表
import java.util.Hashtable;
class LRUCache {
    class DLinkedNode{
        int key;
        int value;
        DLinkedNode prev;
        DLinkedNode next;
    }
    private Map<Integer, DLinkedNode> table = new HashMap<>();
    private int capacity;
    private int size;
    private DLinkedNode head;
    private DLinkedNode tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.size = 0;
        head = new DLinkedNode();
        tail = new DLinkedNode();

        head.next = tail;
        tail.prev = head;
    }

    // 新添加的放在链表第一个
    private void addNode(DLinkedNode node){
        node.next = head.next;
        node.prev = head;

        head.next.prev = node;
        head.next = node;
    }

    private void removeNode(DLinkedNode node){
        DLinkedNode prev = node.prev;
        DLinkedNode next = node.next;

        prev.next = next;
        next.prev = prev;
    }


    // 删除尾节点
    private DLinkedNode removeTail(){
         // 待删除节点---即冗余节点tail的前一个节点
        DLinkedNode waitDelete = tail.prev;
        tail.prev = waitDelete.prev;
        waitDelete.prev.next = tail;
        return waitDelete;
    }

    private void moveNodeToHead(DLinkedNode node){
        removeNode(node);
        addNode(node);
    }

    public int get(int key) {
        if(!table.containsKey(key)){
            return -1;
        }
        // 一旦get了某一值就需要把这个值放到第一个位置，更新它的使用状态
        DLinkedNode node = table.get(key);
        moveNodeToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        // 如果已经存在了，删除当前双向链表中的节点，然后将新填一个一摸一样的节点在链表头部
        DLinkedNode curNode = table.get(key);
        // 待插入的node在table不存在直接插入，同时size++，最后判断是否大于capacity
        
        if(curNode == null) {
            DLinkedNode newNode = new DLinkedNode();
            newNode.key = key;
            newNode.value = value;
            table.put(key, newNode);
            addNode(newNode);
            size++;
            // 判断当前table的大小是否超过了size, 移除最后一个值
            if(size > capacity){
                DLinkedNode removedNode = removeTail();
                table.remove(removedNode.key);
                size--;
            }
        }else{
            // 新增节点已经存在只需要更新value，移动到头部
            curNode.value = value;
            moveNodeToHead(curNode);
        }
    }
}
