658. 找到 K 个最接近的元素

给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。
示例 1:
输入: [1,2,3,4,5], k=4, x=3
输出: [1,2,3,4]

class Solution {
    //思路1：从有序数组中都为节点开始删除元素，删除方针：对比当前首尾节点与目标值target的差值，删除差值大的元素，最后留下来的k个元素肯定是符合要求的
    //思路2：由于这个数组是有序的，那么最接近x这个值得k个元素，也一定是连续的；所以就像滑动窗口那样，这个窗口的移动的范围为【0， length - k】
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int size = arr.length;
        int left = 0;
        // 确定出二分法的左边界的值
        int right = size - k;
        while(left < right) {
            int mid = left + (right - left) / 2;
            // 如果mid位置的值距离x比mid + k更近的话那么应该从【left， mid】这个区间继续找
            if((x - arr[mid]) > (arr[mid + k] - x)) {
                left = mid + 1;
            }else{
                right = mid;
            }
        }
        List<Integer> result = new ArrayList<>();
        for(int i = left; i < left + k; i++) {
            result.add(arr[i]);
        }
        return result;
    }

}
