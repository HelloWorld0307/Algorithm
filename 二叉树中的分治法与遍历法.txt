二叉树解题思考方式：将整个问题分解为一个简单的有根节点和两个叶子节点的树，这样分析问题

175. 翻转二叉树
中文English
翻转一棵二叉树。左右子树交换。
样例 1:

输入: {1,3,#}
输出: {1,#,3}
解释:
	  1    1
	 /  =>  \
	3        3

// 思路： 分治法，此题不复杂，只需要交换根节点root的两个子树即可，主要是遍历的退出条件是什么，如果遇到空节点则不需要做什么事情
public class Solution {
    /**
     * @param root: a TreeNode, the root of the binary tree
     * @return: nothing
     */
    public void invertBinaryTree(TreeNode root) {
        // write your code here
        if(root == null) {
            return;
        }
        invertBinaryTree(root.left);
        invertBinaryTree(root.right);
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
    }
}



596. 最小子树
题目：给一棵二叉树, 找到和为最小的子树, 返回其根节点。
样例 1:
输入:
{1,-5,2,1,2,-4,-5}
输出:1
说明
这棵树如下所示：
     1
   /   \
 -5     2
 / \   /  \
1   2 -4  -5 
整颗树的和是最小的，所以返回根节点1.

// 分治法 + 递归（因为使用大了打擂台全局变量）
// 思想：使用分治法遍历每一个节点的左右子树，从最后一层叶子节点往上走，每一个节点都算出其左右子树加上根节点的总数，使用
//      打擂台全局变量获得总数sum最小的节点
// 使用返回值ResultType方法，其实理论是和分治 + 递归一样的，只不过是全局变量sum 和target节点使用一个自定义类进行封装，
// 方法helper返回的是一个ResultType类
public class Solution1 {

    private int sum = Integer.MAX_VALUE;
    private TreeNode target = null;
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        helper(root);
        return target;
    }
    
    int helper(TreeNode root) {
        if(root == null) {
            return 0;
        }
        int left = helper(root.left);
        int right = helper(root.right);
        // 合并：左右子树和当根节点相加
        int tempSum = left + right + root.val;
        if(tempSum <= sum) {
            sum = tempSum;
            target = root;
        }
        return tempSum;
    }
}

// 返回值ResultType方法
// 思想：返回ResultType方法只是把上面的方法分治法转成的，其方法就是每次返回一个对象ResultType，这类封装了当前节点下总和最小的节点，最小值和
//      当前节点的总和，当节点左右子树都遍历完毕后，拿到返回的left，right对象与根节点进行比较，然后返回当前根节点里的目标只
class ResultType{
    public int sum;  // 当前根节点所有的节点总和
    public TreeNode target; //当前根节点
    public int minimum; // 目前整个子树中总数节点最小的树
    
    public ResultType(int sum, int minimum, TreeNode target) {
        this.sum = sum;
        this.target = target;
        this.minimum = minimum;
    }
}

public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
    
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        return helper(root).target;
    }
    
    ResultType helper(TreeNode root){
        if(root == null) {
            return new ResultType(0, Integer.MAX_VALUE, null);
        }
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        
        ResultType result = new ResultType(left.sum + right.sum + root.val,
                                           left.sum + right.sum + root.val,
                                           root);
        if(left.minimum <= result.minimum) {
            result.minimum = left.minimum;
            result.target = left.target;
        }
        if(right.minimum <= result.minimum) {
            result.minimum = right.minimum;
            result.target = right.target;
        }
        return result;
    }
}


480. 二叉树的所有路径
题目：给一棵二叉树，找出从根节点到叶子节点的所有路径。
样例
样例 1:
输入：{1,2,3,#,5}
输出：["1->2->5","1->3"]
解释：
   1
 /   \
2     3
 \
  5

public class Solution {
    List<String> result = new ArrayList<String>();
    public List<String> binaryTreePaths(TreeNode root) {
        if(root == null) {
            return result;
        }
        helper(root, String.valueOf(root.val));
        return result;
    }
    
    // 递归法：每往下走一次就要把遍历到的节点接到结果字符串后面去，这样找到叶子节点后就可以加入到result里了
    void helper(TreeNode root, String path) {
        if(root == null) {
            return;
        }
        if(root.left == null && root.right == null) {
            result.add(path);
            return;
        }
        if(root.left != null) {
            helper(root.left, path + "->" + root.left.val);
        }
        if(root.right != null) {
            helper(root.right, path + "->" + root.right.val);
        }
    }
}

// 分治法：分治法其实是从底往根节点走，每次遍历走到叶子节点后就将两个叶子节点和根节点组装在一起成为放到
//         root.val + "->" + root.left.val, 一共有几个叶子节点就有几个路径
public class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> paths = new ArrayList<>();
        if(root == null) {
            return paths;
        }
        List<String> leftPaths = binaryTreePaths(root.left);
        List<String> rightPaths = binaryTreePaths(root.right);
        
        for(String path: leftPaths) {
            paths.add(root.val +"->" + path);
        }
        for(String path: rightPaths) {
            paths.add(root.val +"->" + path);
        }
	// 这一步判断只有在循环遍历到叶子节点才有作用，其他的时候不会使用到
        if(paths.size() == 0) {
            paths.add("" + root.val);
        }
        return paths;
    }
}



597. 具有最大平均数的子树
给一棵二叉树，找到有最大平均值的子树。返回子树的根结点。

样例
输入：
{1,-5,11,1,2,4,-2}
输出：11
说明:
这棵树如下所示：
     1
   /   \
 -5     11
 / \   /  \
1   2 4    -2 
11子树的平均值是4.333，为最大的。

// 思想：使用分治法 + 全局变量
//      分治法是从树的最底层往上遍历，肯定是遍历到了最左叶子节点，使用全局变量记录遍历到的节点的最大平均值，注意：思路不能陷入拿root节点和其左右
//      节点对比，而是要拿每一次遍历到的全局变量去对比，如果大于全局变量则记录最大值同时目标节点应该为当前节点

class ResultType{
    public int sum;  // 当前根节点所有的节点总和
    public int nodeCount; // 目前整个子树中总节点数量
    
    public ResultType(int sum, int nodeCount) {
        this.sum = sum;
        this.nodeCount = nodeCount;
    }
}
// 返回ResultType方法 == 分治法
public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the root of the maximum average of subtree
     */
    private TreeNode target = null;  // 每一次遍历找到的临时目标节点然后和上一层对比
    private ResultType tempResult = null;
    public TreeNode findSubtree2(TreeNode root) {
        // write your code here
        helper(root);
        return target;
    }
    
    // 方法的定义：找到当前节点的节点总节点数量，总值和，当前节点，最后求的平均值和左右子树对比
    // 注意⚠️：不能使用左右子树先比，找到大的在和root相比，如果左边大于root，那根节点的target值就为left了，但此时根节点的sum 和count还是原来的，
    //         如果往下走和right比较还是那原来的比较，这样就会出问题
    ResultType helper(TreeNode root){
        if(root == null) {
            return new ResultType(0, 0);
        }
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);

        // 当前root节点的下的值
        ResultType result = new ResultType(left.sum + right.sum + root.val,
                                            left.nodeCount + right.nodeCount + 1);
        // 使用tempResult打擂台
        if(target == null || result.sum * tempResult.nodeCount > result.nodeCount *  tempResult.sum) {
            target = root;
            tempResult = result;
        }
        return result;
    }
}


95. 验证二叉查找树
给定一个二叉树，判断它是否是合法的二叉查找树(BST)

一棵BST定义为：
1，节点的左子树中的值要严格小于该节点的值。
2，节点的右子树中的值要严格大于该节点的值。
3，左右子树也必须是二叉查找树。
4，一个节点的树也是二叉查找树。
样例

输入：{-1}
输出：true
解释：
二叉树如下(仅有一个节点）:
	-1
这是二叉查找树。


// 思路一：使用分治法分别判断根节点的左右子树的是否为BST，最大值，最小值
//       拿下一层求得的左子树的最大值以及右子树的最小值分别和根结点对比
// ResultType定义：一个节点是不是BST，左子树最大值，右子树最小值
class ResultType{
    public boolean isBST;
    public int maxValue;
    public int minValue;
    
    public ResultType(boolean isBST, int maxValue, int minValue) {
        this.isBST = isBST;
        this.maxValue = maxValue;
        this.minValue = minValue;
    }
}

public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    public boolean isValidBST(TreeNode root) {
        // write your code here
        ResultType result = helper(root);
        return result.isBST;
    }
    ResultType helper(TreeNode root) {
        // 重点1：分治法的退出条件之一，当节点为空的时候也是一个BST，且最大最小值分别为无穷小和无穷大
        if(root == null) {
            return new ResultType(true, Integer.MIN_VALUE, Integer.MAX_VALUE);
        }
        ResultType left = helper(root.left);
        ResultType right = helper(root.right);
        if(!left.isBST || !right.isBST) {
            return new ResultType(false, 0, 0);
        }
        // 重点2：当前节点左子树不为空才去判断左边的最大值是否大于根节点，右节点同样操作
        if((root.left != null && left.maxValue >= root.val) || 
           (root.right != null && right.minValue <= root.val)) {
            return new ResultType(false, 0, 0);
        }
        // 重点3：返回以root为根节点子树中最大值和最小值，最后拼接一个完整的ResultType返回
        ResultType returnResult = new ResultType(true, 
                                                Math.max(root.val, right.maxValue), 
                                                Math.min(root.val, left.minValue));
        return returnResult;
    }
}

// 思路二：将树分成两半做校验，左边一般取值范围为(min， root.val),
//       右边取(root.val, max)，如果有一个不符合要求就返回false
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: True if the binary tree is BST, or false
     */
    public boolean isValidBST(TreeNode root) {
        // write your code here
        return helper(root, Long.MIN_VALUE, Long.MAX_VALUE);
    }
    // 重点1:要使用long
    boolean helper(TreeNode root, long min, long max) {
        if(root == null) {
            return true;
        }
        if(root.val <= min || root.val >= max) {
            return false;
        }
        // 重点2:将树分成两半的时候取范围，左边：最大值为root
        boolean left = helper(root.left, min, (long)root.val);
        boolean right = helper(root.right, (long)root.val, max);
        return left && right;
    }
}

88. 最近公共祖先（常考）
给定一棵二叉树，找到两个节点的最近公共父节点(LCA)。
最近公共祖先是两个节点的公共的祖先节点且具有最大深度。
样例

输入：{1},1,1
输出：1
解释：
 二叉树如下（只有一个节点）:
         1
 LCA(1,1) = 1


// 解法一：暴力解法，在有parent指针的情况下，对两个节点依次向上回溯，直到两个节点相同，那么这个节点就是最近公共祖先。时间复杂度为O(n²)
// 解法二：不借用额外的数据结构，没有parent指针。如果在某一个节点的时候，在当前节点的两个子树找到了AB，说明当前节点就是最近公共祖先节点，
// 如果在当前节点的某一个子树里没有发现其中的任何一个node，说明两个节点同在左子树或右子树，递归求解。不管先找到哪个node就返回当前节点

public class Solution {
    /*
     * @param root: The root of the binary search tree.
     * @param A: A TreeNode in a Binary.
     * @param B: A TreeNode in a Binary.
     * @return: Return the least common ancestor(LCA) of the two nodes.
     */
    // 如果以root为根节点的二叉树中
   // A 和 B 都存在则返回lCA，说明有公共节点的
   // A 和 B 都不存在则返回null
   // A存在 B不存在 则返回A
   // A不存在，B存在 则返回B
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
        // 遍历到其中一个根节点都还没有找到A或B，返回当前的root
        if(root == null) {
            return null;
        }
        // 当前遍历的这一层找到了A 或 B，就往上返回，一个子树只可能有其中一个点
        if(root == A || root == B) {
            return root;
        }
        // 这里的返回值就是找的一个A点或B点，如果为null说明没有找到
        TreeNode left = lowestCommonAncestor(root.left, A, B);
        TreeNode right = lowestCommonAncestor(root.right, A, B);
        
        // left 和 right不为空说明在left 和right中找到了A B所以可以返回root
        if(left != null && right != null) {
            return root;
        }
        if (left != null) {
            return left;
        }
        if(right != null) {
            return right;
        }
        return null;
    }
}

66. 二叉树的前序遍历
给出一棵二叉树，返回其节点值的前序遍历。


public class Solution {
    /**
     * @param root: A Tree
     * @return: Preorder in ArrayList which contains node values.
     */
    public List<Integer> preorderTraversal(TreeNode root) {
        // write your code here
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> list = new ArrayList<>();
        if(root != null){
            stack.push(root);
        }
        while(!stack.empty()) {
            TreeNode cur = stack.pop();
            list.add(cur.val);
            if(cur.right != null) {
                stack.push(cur.right);
            }
            if(cur.left != null) {
                stack.push(cur.left);
            }
        }
        return list;
    }
}


67. 二叉树的中序遍历
// 思路（非递归）：先把最左边全都加进stack，然后开始pop，每pop一次检查：
// 1.右边为空就一直pop；
// 2.不为空就去右边，然后再一次将左边的一条下来全加进stack里。重复该过程。
public class Solution {
    /**
     * @param root: A Tree
     * @return: Inorder in ArrayList which contains node values.
     */
    public List<Integer> inorderTraversal(TreeNode root) {
        // write your code here
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> list = new ArrayList<>();
        
        while(root != null) {
            stack.push(root);
            root = root.left;
        }
        
        while(!stack.empty()){
            TreeNode cur = stack.pop();
            list.add(cur.val);
            if(cur.right != null) {
                TreeNode node = cur.right;
                while(node != null) {
                    stack.push(node);
                    node = node.left;
                }
            }
        }
        return list;
    }
}

68.二叉后序遍历
// 思想：将正常的后序遍历步骤左右中，push进stack的顺序是右左，最后再反转一次最终的list结果即可，
// revser方法虽然是o(n)但是再while循环外面
public class Solution {
    /*
     * @param root: A Tree
     * @return: Postorder in ArrayList which contains node values.
     */
    public List<Integer> postorderTraversal(TreeNode root) {

        List<Integer> results = new ArrayList<Integer>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        
        if (root == null) {
            return results;
        }
        stack.push(root);

        while (!stack.empty()) {
            TreeNode curNode = stack.pop();

            results.add(curNode.val);

            if (curNode.left != null) {
                stack.push(curNode.left);
            }

            if (curNode.right != null) {
                stack.push(curNode.right);
            }
        }
        
        Collections.reverse(results);
        
        return results;
    }
}

453. 将二叉树拆成链表（常考）
将一棵二叉树按照前序遍历拆解成为一个 假链表。所谓的假链表是说，用二叉树的 right 指针，来表示链表中的 next 指针。

样例

输入：{1,2,5,3,4,#,6}
输出：{1,#,2,#,3,#,4,#,5,#,6}
解释：
     1
    / \
   2   5
  / \   \
 3   4   6
 
1
\
 2
  \
   3
    \
     4
      \
       5
        \
         6


// 思路：从最右边的叶子节点开始记录，将整个整理好的右子树全部接在左子树中的最右节点，
//       将其左节置为空，使用prev变量记录刚刚已经整理好的节点，以便拼接在下一个节点的右子树上
// 最好走一遍代码
// 递归

public class Solution {
         
    TreeNode prev = null;
    public void flatten(TreeNode root) {
        // write your code here
        if(root == null) {
            return;
        }
        flatten(root.right);
        flatten(root.left);
        root.left = null;
        root.right = prev;
        prev = root;
    }
}



11. 二叉查找树中搜索区间
给定一个二叉查找树和范围[k1, k2]。按照升序返回给定范围内的节点值。
样例

输入：{5},6,10
输出：[]
        5
它将被序列化为 {5}
没有数字介于6和10之间
样例 2:

输入：{20,8,22,4,12},10,22
输出：[12,20,22]
解释：
        20
       /  \
      8   22
     / \
    4   12
它将被序列化为 {20,8,22,4,12}
[12,20,22]介于10和22之间

public class Solution {
    /**
     * @param root: param root: The root of the binary search tree
     * @param k1: An integer
     * @param k2: An integer
     * @return: return: Return all keys that k1<=key<=k2 in ascending order
     */
     
     // 思路：使用中序遍历对比每一个遍历的节点是否在[k1, k2]范围内，在则add到List中去
     List<Integer> result = new ArrayList<>();
    public List<Integer> searchRange(TreeNode root, int k1, int k2) {
        // write your code here
        helper(root, k1, k2);
        return result;
    }
    
    private void helper(TreeNode root, int start, int end) {
        if(root == null) {
            return;
        }
        helper(root.left, start, end);
        if(root.val >= start && root.val <= end) {
            result.add(root.val);
        }
        helper(root.right, start, end);
    }
}


85. 在二叉查找树中插入节点
给定一棵二叉查找树和一个新的树节点，将节点插入到树中。

你需要保证该树仍然是一棵二叉查找树。

样例
	输入: tree = {}, node= 1
	输出: {1}
	
	样例解释:
	在空树中插入一个点，应该插入为根节点

// 思路：我们将插入的节点作为叶子节点的子节点插入。插入到哪个叶节点可以遵循以下原则：
 // 若 val > node.val，插入到右子树。
 // 若 val < node.val，插入到左子树。
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) {
            return new TreeNode(val);
        }
        if(root.val > val) {
            root.left = insertIntoBST(root.left, val);
        }
        if(root.val < val) {
            root.right = insertIntoBST(root.right, val);
        }
        return root;
    }
}




106. 有序链表转换为二分查找树
中文English
给出一个所有元素以升序排序的单链表，将它转换成一棵高度平衡的二分查找树

样例
样例 1:
	输入: array = 1->2->3
	输出:
		 2  
		/ \
		1  3

//思路： 题目提到了平衡二叉树，那么就将链表重中间分开，首节点为根节点，从 size / 2 处分开，
//      那么左右两部分就是首节点为根结点的二叉树的左右子树，然后将分成两部分的链表每一部分再继续分两半知道 size <= 0

public class Solution {
    /*
     * @param head: The first node of linked list.
     * @return: a tree node
     */
    private ListNode current;
    
    private int getSize(ListNode head) {
        int size = 0;
        while(head != null) {
            size++;
            head = head.next;
        }
        return size;
    }
    
    public TreeNode sortedListToBST(ListNode head) {
        // write your code here
        int size = 0;
        current = head;
        size = getSize(head);
        return helper(size);
        
    }
    
    private TreeNode helper(int size) {
        // 当size = 0的时候说明此时的链表节点为对应的二叉树的叶子节点
        if(size <= 0) {
            return null;
        }
        TreeNode left = helper(size / 2);
        // 拿到当前head节点的值，生成一个TreeNode节点
        TreeNode root = new TreeNode(current.val);
        current = current.next;
        // 计算左边长度的时候要记住剪掉首节点也就是根节点的个数1
        TreeNode right = helper(size - 1 - size / 2);
        // 合并：最后求得的left 和right就是当前root为根的左右子树
        root.left = left;
        root.right = right;
        return root;
    }
}

98. 验证二叉搜索树
给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true

// 思路：使用中序遍历获得数据肯定是后一个比前一个大，如果后一个比前面的数据小的话直接返回false
 class Solution{
     double inorder = - Double.MAX_VALUE;
     public boolean isValidBST(TreeNode root){
         if(root == null) {
             return true;
         }
         Stack<TreeNode> stack = new Stack<>();
         while(root != null) {
            stack.push(root);
            root = root.left;
         }

         while(!stack.isEmpty()) {
             TreeNode head = stack.pop();
            if(head.val <= inorder) {
                return false;
            }
            inorder = head.val;
             if(head.right != null) {
                 TreeNode tempNode = head.right;
                 while(tempNode != null) {
                     stack.push(tempNode);
                     tempNode = tempNode.left;
                 }
             }
         }
         return true;
     }
 }
 // 验证搜索二叉树：1， 使用分治法去分别判断左右子树节点值是否符合二叉搜索树即，root.val > root.left.val  && root.val < root.right.val， 
 // 2，判断边界问题，左右子树中所有的数据都要符合要求，这意味着我们需要在遍历树的同时保留结点的上界与下界，在比较时不仅比较子结点的值，也要与上下界比较。

class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);
    }
    boolean helper(TreeNode root, Integer lower, Integer upper){
        if(root == null){
            return true;
        }
        int val = root.val;
        if(upper != null && upper <= val){
            return false;
        }
        if(lower != null && lower >= val){
            return false;
        }
        if(!helper(root.left, lower, val)){
            return false;
        }
        if(!helper(root.right, val, upper)){
            return false;
        }
        return true;
    }
}

902. BST中第K小的元素
给一棵二叉搜索树，写一个 KthSmallest 函数来找到其中第 K 小的元素。

样例

输入：{1,#,2},2
输出：2
解释：
	1
	 \
	  2
第二小的元素是2。

// 思路：BST是一个左子树最大节点永远小于根节点，右子树所有的最小的节点大于根节点
// 方法一：使用中序遍历，找到最左节点后往上返回一次就计数一次，当count 等于k就是目标值了
// 方法二：使用中序遍历求得遍历后的数组，然后get(k)即为目标值
public class Solution {
    int count = 0;
    int kCount;
    int target;

    public int kthSmallest(TreeNode root, int k) {
        // write your code here
        kCount = k;
        helper(root);
        return target;
    }
    
    void helper(TreeNode root) {
        if(root == null) {
            return;
        }
        helper(root.left);
        count++;
        if(count == kCount){
            target = root.val;
        }
        helper(root.right);
    }
}

//思路：如果涉及到多次查询的话，先使用分治法把每一个节点，以节点对象本身作为key，左右子树加上根基作为value存入map中， 
//     在定位的时候直接中map中间查询即可，那么接下来的查询将是非常快的
public class Solution {
   
    public int kthSmallest(TreeNode root, int k) {
        // write your code here
        Map<TreeNode, Integer> countedHashMap = new HashMap<>();
        countNodes(root, countedHashMap);
        return quickSelect(root, countedHashMap, k);
    }

    // 统计每一个节点的左右子树总和
    int countNodes(TreeNode root, Map<TreeNode, Integer> countedHashMap) {
        if(root == null) {
            return 0;
        }
        int left = countNodes(root.left, countedHashMap);
        int right = countNodes(root.right, countedHashMap);
        countedHashMap.put(root, left + right + 1);
        return left + right + 1;
    }

    // 对每个节点统计过左右子树和，例如当前节点root有n个子节点，如果k <= n 则继续往子树的左边找，n + 1 = k则说明当前节点就是目标节点，
    // 因为左子树的所有节点加1等于根节点，说明根根节点就是第k个节点；其他的情况就是就往右找，但是此时要考虑到右边节点的个数在内， 
    // 在左边节点要到第 k - left - 1小的节点这样依次遍历
    int quickSelect(TreeNode root, Map<TreeNode, Integer> countedHashMap, int k) {
        if(root == null) { // 做题的时候纠结了返回值
            return -1;
        }
        int left = root.left == null? 0 : countedHashMap.get(root.left);
        if(left >= k) {
            return quickSelect(root.left, countedHashMap, k);
        }
        if(left + 1 == k) { //这里没有想到
            return root.val;
        }
        return quickSelect(root.right, countedHashMap, k - left - 1); // 这里是重点
    }
}


86. 二叉查找树迭代器
设计实现一个带有下列属性的二叉查找树的迭代器：
next()返回BST中下一个最小的元素

元素按照递增的顺序被访问（比如中序遍历）
next()和hasNext()的询问操作要求均摊时间复杂度是O(1)
样例

输入：{10,1,11,#,6,#,12}
输出：[1, 6, 10, 11, 12]
解释：
二叉查找树如下 :
  10
  /\
 1 11
  \  \
   6  12
可以返回二叉查找树的中序遍历 [1, 6, 10, 11, 12]

思路： 题目要求按照二叉树的中序遍历的顺序遍历所有的数据，每遍历一个节点都要往将其节点的左子树所有节点push进栈里，
     因为这样是符合中序遍历的，一旦没有左子树了，就将当前节点pop出去并返回数据。

该 Iterator 算法即 non-recursion 的 inorder traversal，不仅仅适用于 BST，任何 Binary Tree 都可以
• stack 中保存一路走到当前节点的所有节点
• stack的栈顶 一直存储 iterator 指向的当前节点
• hasNext() 只需要判断 stack 是否为空
• next() 只需要返回 stack 的栈顶值，并将 iterator 挪到下一个点，对 stack 进行相应的变化

挪到下一个点的算法如下:
• 如果当前点存在右子树，那么就是右子树中“一路向左”最左边的那个点
• 如果当前点不存在右子树，则是走到当前点的路径中，第一个左拐的点

public class BSTIterator {
    /*
    * @param root: The root of binary tree.
    */
    Stack<TreeNode> st = new Stack<>();
    TreeNode cur;
    public BSTIterator(TreeNode root) {
        // do intialization if necessary
        cur = root;
    }

    /*
     * @return: True if there has next node, or false
     */
    public boolean hasNext() {
        // write your code here
        return cur != null || !st.empty();
    }

    /*
     * @return: return next node
     */
    public TreeNode next() {
        // write your code here
        while(cur != null) {
            st.push(cur);
            cur = cur.left;
        }
        cur = st.pop();
        TreeNode tempCur = cur;
        cur = cur.right;
        return tempCur;
    }
}

448. 二叉查找树的中序后继
给定一个二叉查找树(什么是二叉查找树)，以及一个节点，求该节点在中序遍历的后继，如果没有则返回null

样例

输入: {1,#,2}, node with value 1
输出: 2
解释: 
  1
   \
    2

// p 节点已经找到后判断
// a), p没有右子树，则后继节点为其父节点
// b), p有右子树，直接返回最右子树中的左节点

public class Solution {
    /*
     * @param root: The root of the BST.
     * @param p: You need find the successor node of p.
     * @return: Successor of p.
     */
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
        // write your code here
        // 思路：找到目标节点，1，有右子树则后序节点为右子树中最左节点，2，没有右子树当前root节点父节点即是
        if(root == null) {
            return null;
        }
        // 当目标节点为某个子树的左子树的时候记录其父节点作为successor，因为只有为右子树的时候其后继节点才是其根节点
        TreeNode successor = null;
        // 找到目标节点
        while(p != null && p != root){
            if(p.val > root.val) {
                // p 在当前结点的左子树
                // 只有往左查找时 successor 才需要不断更新
                root = root.right;
            } else {
                // p 在某一结点的右子树
                // 向当前结点右子树查找时，successor 仍是当前结点的父结点不变
                successor = root;
                root = root.left;
            }
        }
        if(root.right == null) {
            return successor;
        }
        root = root.right;
        while(root.left != null) {
            root = root.left;
        }
        return root;
    }
}


900. 二叉搜索树中最接近的值
给一棵非空二叉搜索树以及一个target值，找到在BST中最接近给定值的节点值
样例

输入: root = {5,4,9,2,#,8,10} and target = 6.124780
输出: 5
解释：
二叉树 {5,4,9,2,#,8,10}，表示如下的树结构：
        5
       / \
     4    9
    /    / \
   2    8  10

// 思想：求出 lowerBound 和 upperBound。即 < target 的最大值和 >= target 的最小值。
//      然后在两者之中去比较谁更接近，然后返回即可。（背）
// 注意：时间复杂度为 O(h)O(h)，注意如果你使用 in-order traversal 的化，时间复杂度会是 o(n)o(n) 
// 并不是最优的。另外复杂度也不是 O(logn)O(logn) 因为BST 并不保证树高是 logn 的。
public class Solution {
    /**
     * @param root: the given BST
     * @param target: the given target
     * @return: the value in the BST that is closest to the target
     */
    public int closestValue(TreeNode root, double target) {
        if(root == null) {
            return 0;
        }
        // write your code here
        TreeNode left = lowerBound(root, target);
        TreeNode right = upperBound(root, target);
        if(left == null) {
            return right.val;
        }
        if(right == null) {
            return left.val;
        }
        if (target - left.val > right.val - target) {
            return right.val;
        }
        return Math.abs(left.val - target) > Math.abs(right.val - target) ? right.val : left.val;
     }
     // 求小于target的最大值
    TreeNode lowerBound(TreeNode root, double target){
        if(root == null) {
            return null;
        }
        // root大于target说明target在root的左边，往左边继续找到
        if(root.val >= target) {
            return lowerBound(root.left, target);
        }
        // root.val < target的情况
        TreeNode value = lowerBound(root.right, target);
        if(value != null) {
            return value;
        }
        return root;
    }
    // 求大于target的最小值
    TreeNode upperBound(TreeNode root, double target) {
        if(root == null) {
            return null;
        }
        if(root.val <= target){
            return upperBound(root.right, target);
        }
        // root.val >= target的情况
        TreeNode result = upperBound(root.left, target);
        if(result != null) {
            return result;
        }
        return root;
    }
}

901. 二叉搜索树中最接近的值 II （困难级）
给定一棵非空二叉搜索树以及一个target值，找到 BST 中最接近给定值的 k 个数。
https://www.lintcode.com/problem/closest-binary-search-tree-value-ii/
https://www.jiuzhang.com/solution/closest-binary-search-tree-value-ii/

public class Solution {

    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        // write your code here
        List<Integer> list = new ArrayList<>();

        //使用中序遍历出递增的list
        inorderTravers(root, list);

        // 使用二分法找到第一个小于等于target的值
        int start = 0; 
        int end = list.size() - 1;
        int index;
        while(start + 1 < end) {
            int mid = start + (end - start) / 2;
            if(list.get(mid) >= target) {
                end = mid;
            }else{
                start = mid;
            }
        }
        if(list.get(start) >= target){
            index = start;
        }else {
            index = end;
        }
        
        int n = list.size();
        int left = index - 1, right = index;
        List<Integer> result = new ArrayList<>();
        // 题目要求找到k个值，所以只需要移动k次，每移动一次就判断left 和right谁离target值近，谁近谁加入到list中，
        // 同时往左或右移动一次，往左走的条件是左指针 还没有或者刚到开始节点，同时右指针已经到达尾部或超过尾部或者右指针比左指针离的近
        for (int i = 0; i < k; i++) {
            if (left >= 0 && (right >= n || target - list.get(left) < list.get(right) - target)) {
                result.add(list.get(left));
                left--;
            } else {
                result.add(list.get(right));
                right++;
            }
        }
        return result;
    }

    //使用中序遍历出递增的list
    void inorderTravers(TreeNode root, List<Integer> list) {
        if(root == null) {
            return;
        }
        inorderTravers(root.left, list);
        list.add(root.val);
        inorderTravers(root.right, list);
    }
}

87. 删除二叉查找树的节点
给定一棵具有不同节点值的二叉查找树，删除树中与给定值相同的节点。如果树中没有相同值的节点，就不做任何处理。你应该保证处理之后的树仍是二叉查找树。

样例

输入: 
Tree = {5,3,6,2,4}
k = 3
输出: {5,2,6,#,4} 或 {5,4,6,2}
说明:
给定了以下二叉搜索树:
    5
   / \
  3   6
 / \
2   4
移去3，你可以返回:
    5
   / \
  2   6
   \
    4
或
    5
   / \
  4   6
 /
2

  思路一：根据二叉查找树性质，三种情况，
       1，待删除节点右子树不为空，好到该子树的最左叶子节点，即后继节点；
       2，左子树不为空，找到该子树的右子树中最右叶子节点，即前继节点；
       3，待删除节点为叶子节点，则直接删除该节点
  注意：当后继或前序节点值放到目标位置后，那么该前序和后序节点就需要删除掉，则可以使用递归法，将新的后序或者前继节点作为待删除节点继续循环
 

public class Solution {
    /*
     * @param root: The root of the binary search tree.
     * @param value: Remove the node with given value.
     * @return: The root of the binary search tree after removal.
     */
    public TreeNode removeNode(TreeNode root, int value) {
        // write your code here
        if(root == null) {
            return null;
        }
        if(root.val > value) { // 往左边找, 在root的左子树中找，如果找到了就可以直接把最后的结果赋给当前根节点root，
            root.left = removeNode(root.left, value);
        }else if(root.val < value){ // 往右边找
            root.right = removeNode(root.right, value);
        }else { // 找到了目标位置
            if(root.left == null) {
                return root.right;
            }
            if(root.right == null) {
                return root.left;
            }
            // 目标节点左右子树都不为空的情况
            // 将目标节点置换为其右子树中最小的值，然后相同操作继续往右子树中走
            root.val = findMinVal(root.right).val;  //找到右子树中最小值
            root.right = removeNode(root.right, root.val); //因为上一步求的最小值其实在以root为根的树中右来两个，所以需要干掉其右子树的相同的节点
        }
        return root;
    }
    
    private TreeNode findMinVal(TreeNode root) {
        while(root.left != null) {
            root = root.left;
        }
        return root;
    }
}

814. 二叉树剪枝

 给定二叉树根结点 root ，此外树的每个结点的值要么是 0，要么是 1。

返回移除了所有不包含 1 的子树的原二叉树。

( 节点 X 的子树为 X 本身，以及所有 X 的后代。)

示例1:
输入: [1,null,0,0,1]
输出: [1,null,0,null,1]
 
解释: 
只有红色节点满足条件“所有不包含 1 的子树”。

// 思路：二叉树的后序遍历，先判断左右子树是否为0， 最后返回的值要加上当前的根节点是否为1
class Solution {
    public TreeNode pruneTree(TreeNode root) {
        helper(root);
        return root;
    }

    boolean helper(TreeNode root){
        // root为null表示为根叶子节点，当为叶子节点left || right || root.val == 1;也是可以适用的，如果为0直接返回false，
        // 将root节点的当前子树置为null即可
        if(root == null) {
            return false;
        }
        boolean left = helper(root.left);
        boolean right = helper(root.right);
        if(!left){
            root.left = null;
        }
        if(!right){
            root.right = null;
        }
        return left || right || root.val == 1;
    }

}

实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。

调用 next() 将返回二叉搜索树中的下一个最小的数。

 

示例：



BSTIterator iterator = new BSTIterator(root);
iterator.next();    // 返回 3
iterator.next();    // 返回 7
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 9
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 15
iterator.hasNext(); // 返回 true
iterator.next();    // 返回 20
iterator.hasNext(); // 返回 false

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class BSTIterator {
    int startIndex = -1;
    List<Integer> list = null;
    public BSTIterator(TreeNode root) {
        list = new ArrayList<Integer>();
        iterator(root);
    }

    // 将二叉树扁平化，使用中序遍历将树转化为数组的形式（二叉搜索树的中序遍历为上升顺序）
    private void iterator(TreeNode root){
        if(root == null) {
            return;
        }
        iterator(root.left);
        list.add(root.val);
        iterator(root.right);
    }
    
    /** @return the next smallest number */
    public int next() {
        return list.get(++startIndex);
    }
    
    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return startIndex + 1 < list.size();
    }
}

430. 扁平化多级双向链表
您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。

扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。

示例:

输入:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
输出:
1-2-3-7-8-11-12-9-10-4-5-6-NULL

/*
// Definition for a Node.
class Node {
    public int val;
    public Node prev;
    public Node next;
    public Node child;

    public Node() {}

    public Node(int _val,Node _prev,Node _next,Node _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/

// 思路：将双向链表顺时针转动90度，会看成一个链表，next指针为右子树， child为左子树
// 双向链表需要声名一个dummyNode 的前序节点，当结束后需要将先去节点去掉，同时第一节点的前序节点置为空
class Solution {
  public Node flatten(Node head) {
    if(head == null) {
        return head;
    }
    Stack<Node> stack = new Stack<>();
    stack.push(head);
    Node dummyNode = new Node(0, null, head, null);
    Node prev = dummyNode;
    Node cur = dummyNode;
    while(!stack.isEmpty()) {
        cur = stack.pop();
        prev.next = cur;
        cur.prev = prev;
        if(cur.next != null) {
            stack.push(cur.next);
        }
        if(cur.child != null) {
            stack.push(cur.child);
            cur.child = null;
        }
        prev = cur;
    }
    dummyNode.next.prev = null;
    return dummyNode.next;
  }
}
