动态规划
什么情况下使用动态规划? 
满足下面三个条件之一: 
• 求最大值最小值 
• 判断是否可行， 例如判断某个方案的可行性
• 统计方案个数 
• 只能记录一种最优方案
则 极有可能 是使用动态规划求解 

不可能使用动态规划
求出所有 具体 的方案而非方案 个数
• http://www.lintcode.com/problem/palindrome-partitioning/ 
• 输入数据是一个 集合 而不是 序列
• http://www.lintcode.com/problem/longest-consecutive-sequence/
• 暴力算法的复杂度已经是多项式级别
• 动态规划擅长与优化指数级别复杂度(2^n,n!)到多项式级别复杂度(n^2,n^3) • 不擅长优化n^3到n^2
• 则 极不可能 使用动态规划求解

动规四要素 vs 递归三要素
动规四要素:
• 状态 State (这一步是最重要的，思考怎么定义一个状态)
• 灵感，创􏰀力，存储小规模问题的结果
• 方程 Function
• 状态之间的联系，怎么通过小的状态，来算大的状态 • 初始化 Initialization
• 最极限的小状态是什么, 起点
• 答案 Answer
• 最大的那个状态是什么，终点

递归三要素:
• 定义(状态)
• 接受什么参数
• 做了什么事
• 返回什么值 • 拆解(方程)
• 如何将参数变小 • 出口(初始化)
• 什么时候可以直接 return

120. 三角形最小路径和

给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。

例如，给定三角形：

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）

class Solution {
    private int min = Integer.MAX_VALUE;
    private int[][] array = null;
    private int[][] hash = null;
    private int[][] dp = null;
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle == null){
            return 0;
        }
        // list 转成二维数组
        array = convertListToArray(triangle);
        // 分支和递归
        // helper(0, 0, 0);

        // 动态规划
        // helper(0, 0);
        return helper(array);
    }

    // 多重循环的动态规划方式，可以先把最后一层的最短路径算好，然后从下往上走
    // 优点:正规，大多数面试官可以 接受，存在空间优化可能性。
    // 缺点:思考有难度。
    private int helper(int [][] nums) {
        // 行数
        int rows = nums.length;
        // 列数
        int colums = nums[rows - 1].length;
        // 最后一行元素到自己的最小权重就是自己元素大小
        for(int i = 0; i < colums; i++) {
            dp[rows - 1][i] = nums[rows - 1][i];
        }

        for(int i = rows - 2; i >= 0; i--) {
            for(int j = 0; j <= i; j++) {
                // 注意求路径同时也需要加上当前元素的值
                dp[i][j] = nums[i][j] + Math.min(dp[i + 1][j], dp[i + 1][j + 1]);
            }
        }
        return dp[0][0];
    }

   // *---分治 + 动态规划---
   // 这一题也可以叫记忆化搜索，其实他的本质也就是动态规划，但是看起来和分治很像，主要区别就是去除了重复计算步骤
   // 其他的方式在处理的时候，每一个路径的每一个节点都会重新处理一次，有的节点会处理两次或者多次，例如上一层的3 和 4节点，当
   // 在往下计算都会走到分支节点5，然后以节点5在下一次的递归中(x + 1, y)以及(x + 1, y +1)这两个分支求的最短路径，
   // 也就是5这节点可能会做多次相同的计算，
   // 时间复杂度：O(n ^ 2) ----2 + 4 + 6 + 8+....+ 2*n = n ^ 2
   // 优点:容易从搜索算法直接转化过 来。有的时候可以节省更多的时间。
   // 缺点:递归。
    private int helper(int x, int y) {
        // 判断是否为到了数组的最后一行， array.length - 1 其实才是最后一行，当x到了array.length 后说明最后一行已经处理过了，所以可以去判断sum了
        if(x == array.length){
            return 0;
        }
        // 如果当前hash元素不为Integer.MAX_VALUE这说明该节点已经处理过了, 就不需要在去处理了
        if(hash[x][y] != Integer.MAX_VALUE) {
            return hash[x][y];
        }
        // 将list转换为array后其实就是一个垂直三角形，根据题目意思就是：每一步的移动只能向下，或者向右下移动
        int left = helper(x + 1, y);
        int right = helper(x + 1, y + 1);
        hash[x][y] = array[x][y] + Math.min(left, right);
        return hash[x][y];
    }


    // 分治法--超时
    // 时间复杂度O(2^n), 容易超时
    // 宽度优先算法不能用在这题中，因为使用宽度优先算法前提是所有的步骤权重为1，但是这题中不同的路径权重是不一样的
    // private int helper(int x, int y, int sum) {
    //     // 判断是否为到了数组的最后一行， array.length - 1 其实才是最后一行，当x到了array.length 后说明最后一行已经处理过了，所以可以去判断sum了
    //     if(x == array.length){
    //         return sum;
    //     }
    //     // 将list转换为array后其实就是一个垂直三角形，根据题目意思就是：每一步的移动只能向下，或者向右下移动
    //     int left = helper(x + 1, y, sum + array[x][y]);
    //     int right = helper(x + 1, y + 1, sum + array[x][y]);
    //     return Math.min(left, right);
    // }

    // 遍历法--超时
    // 时间复杂度：O(2^n)-----2 + 4 + 8 + ... 2^n
    // private void helper(int x, int y, int sum) {
    //     // 判断是否为到了数组的最后一行， array.length - 1 其实才是最后一行，当x到了array.length 后说明最后一行已经处理过了，所以可以去判断sum了
    //     if(x == array.length){
    //         if(min > sum){
    //             min = sum;
    //         }
    //         return;
    //     }
    //     // 将list转换为array后其实就是一个垂直三角形，根据题目意思就是：每一步的移动只能向下，或者向右下移动
    //     helper(x + 1, y, sum + array[x][y]);
    //     helper(x + 1, y + 1, sum + array[x][y]);
    // }

    int[][] convertListToArray (List<List<Integer>> lists){
        int rows = lists.size();
        int colums = Integer.MIN_VALUE;
        // 获得二维数组的列数
        for(List<Integer> list: lists) {
            if(list.size() > colums){
                colums = list.size();
            }
        }
        int [][] arr = new int[rows][colums];
        hash = new int[rows][colums];
        dp = new int[rows][colums];
        // list转化为array
        for(int i = 0; i < lists.size(); i++) {
            for(int j = 0; j < lists.get(i).size(); j++) {
                arr[i][j] = lists.get(i).get(j);
                hash[i][j] = Integer.MAX_VALUE;
            }
        }
        return arr;
    }
}

64. 最小路径和
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

// 思路：思想，从起点到元素[i][j]的最近距离
// 具体实现：自顶向下，某一个元素从哪几个元素可以到达，在这个几个临近元素寻找路径已经是最小值的，选取一个即可
// 公式：dp[i][j] = grid[i][j] + Math.min(dp[i][j - 1], dp[i - 1][j]);
// 时间复杂：O(n * m)

class Solution {
    public int minPathSum(int[][] grid) {
        if(grid == null) {
            return 0;
        }
        int rows = grid.length;
        int colums = grid[0].length;
        int [][] dp = new int[rows][colums];

        // 这里需要提前计算出dp[rows - 1][0], dp[0][colums - 1]的值
        // 推导状态为dp[i][j] 即从起点到[i][j]的最短距离， 当前点[i][j] 依赖上一个点，所以需要先计算出上面点的最短路径
        // 公式为dp[i][j] = grid[i][j] + Math.min(dp[i][j - 1], dp[i - 1][j])
        // 但是有一个特殊的情况，当在第一行的时候该行没有往上走的路径，只有往左走的节点，以及第一列没有左边的路径只有往上走
        // 这两列都需要特殊处理

        // 处理第一列, 注意第一行和第一列有一个重复元素就是[0][0]，如果处理两次就会出问题
        int sum = grid[0][0];
        int sum1 = grid[0][0];
        dp[0][0] = grid[0][0];
        for(int i = 1; i < colums; i++) {
           sum += grid[0][i];
           dp[0][i] = sum;
        }
        // 处理第一列
        for(int j = 1; j < rows; j++) {
           sum1 += grid[j][0];
           dp[j][0] = sum1;
        }
        for(int i = 1; i < rows; i++) {
            for(int j = 1; j < colums; j++) {
                dp[i][j] = grid[i][j] + Math.min(dp[i][j - 1], dp[i - 1][j]);
            }
        }
        return dp[rows - 1][colums - 1];
    }
}

62. 不同路径
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
问总共有多少条不同的路径？

示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

// 思路：该题符合可行方案数量这个动态规划的条件
// 具体方案：dp[i][j] 表示的是从起点到目标点[i][j]所有左边和上边可能路径数量的和

class Solution {
    // 求可行方案个数
    public int uniquePaths(int m, int n) {
        // 起始位置为【0，0】终点为【m - 1， n - 1】
        if(m == 0 || n == 0){
            return 1;
        }
        // m为列 n为行
        int[][] dp = new int[n][m];
        for(int i = 0; i < m; i++) {
            dp[0][i] = 1;
        }
        for(int i = 0; i < n; i++) {
            dp[i][0] = 1;
        }
        for(int i = 1; i < n; i++) {
            for(int j = 1; j < m; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[n - 1][m - 1];
    }
}


300. 最长上升子序列

给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:

输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。
说明:

可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n2) 。


// 思路：dp[i] 表示从某个位置到位置i最长连续序列长度, 所以需要在位置i前面找到所有可以到达位置i的点，去判断这些点的最大连续个数，
// 找到最大之后加一就是到达位置i的最大连续长度
// 初始化： 每一点都可以作为起始点，所以需要给每个点初始化为1 
class Solution {
    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int max = 0;
        for(int i = 0; i < nums.length; i++){
            // 每个位置到他自己位置连续长度为1
            dp[i] = 1;
            // 该层循环其实就是找到位置i前面所有可以到达i的位置的节点的最大连续序列长度
            for(int j = 0; j < i; j++) {
                if(nums[j] < nums[i]) {
                    dp[i] = dp[i] > dp[j] + 1 ? dp[i] : dp[j] + 1; 
                }
            }
            if(max < dp[i]){
                max = dp[i];
            }
        }
        return max;
    }
}


354. 俄罗斯套娃信封问题	
给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

说明:
不允许旋转信封。

示例:

输入: envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出: 3 
解释: 最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。

// 思路：这一题和最长连续上升子序列相识的，上一题中从一个数组中找到一个最长的连续上升子序列，这一题需要是后面一个范围可以完全包括前面一个范围
// 即：以每一个行数组的第一个元素排序后，在第二个数组找到一个最大连续数列即可
// 例如：以第一个元素排序后元素为[2,3][5,4][6,4][6,7] 接着从这个二维数组找到第二个元素最大的连续数组，a:[2,3][5,4][6,7] 
// 公式：dp[i] = Math.max{dp[i], dp[j] + 1}
class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        if(envelopes == null || envelopes.length == 0) {
            return 0;
        }
        Arrays.sort(envelopes, (a, b) -> a[0] - b[0]);
        int[] dp = new int[envelopes.length];
        // 这里需要初始化每一个dp，因为每一个信封都可以封装自己，是满足要求的
        dp[0] = 1;
        int max = 1;
        for(int i = 1; i < envelopes.length; i++) {
            dp[i] = 1;
            for(int j = 0; j < i; j++) {
                // 由于是后一个信封的长和宽都需要大于前面的一个的，所以需要对长和宽做对比
                if((envelopes[i][0] > envelopes[j][0]) && (envelopes[i][1] > envelopes[j][1])){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                }
            }
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

279. 完全平方数

给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

//  思路1: dp[i]：表示完全平方数和为i的 最小个数
//  初始状态dp[i]均取最大值i，即 1+1+...+1，i个1; dp[0] = 0
//  dp[i] = min(dp[i], dp[i-j*j]+1)，其中, j是平方数, j=1~k,其中k*k要保证 <= i
//  意思就是：完全平方数和为i的 最小个数 等于 当前完全平方数和为i的 最大个数
//  与 （完全平方数和为 i - j * j 的 最小个数 + 完全平方数和为 j * j的 最小个数）
//  可以看到 dp[j*j] 是等于1的

// 思路2: 这个和零钱兑换像似，目标额度target其实就是个数n，从【1， n的平方根数】选择即可
// https://leetcode-cn.com/problems/coin-change/ 零钱兑换头条面试过
class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        
        for(int i = 1; i <= n; i++) {
            dp[i] = i;
            for(int j = 1; j * j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i - j * j] + 1);
            } 

        }
        return dp[n];
    }
}


368. 最大整除子集

给出一个由无重复的正整数组成的集合，找出其中最大的整除子集，子集中任意一对 (Si，Sj) 都要满足：Si % Sj = 0 或 Sj % Si = 0。

如果有多个目标子集，返回其中任何一个均可。

示例 1:

输入: [1,2,3]
输出: [1,2] (当然, [1,3] 也正确)
示例 2:

输入: [1,2,4,8]
输出: [1,2,4,8]

class Solution {
// 思路1: 这种方法不行，因为如果分别拿当前位置i去和前面所有元素相除的是不满足要求的，例如【4，8，10，240】，
//       当元素为240的时候去和前面每一个元素相除，都是可以的，但是10 和其4，8元素就不符合要求
//     public List<Integer> largestDivisibleSubset(int[] nums) {
//         int len = nums.length;
//         List<Integer> list = new ArrayList<>();
//         if(nums == null || nums.length == 0) {
//             return list;
//         }
//         Arrays.sort(nums);
//         int dp[] = new int[len]; // dp[i] 表示前0到i-1个元素中最长以第i-1 个元素结尾的整除子集
//         int max = 0;
//         // 这种方法不行，因为如果分别拿当前位置i去和前面所有元素相除的是不满足要求的，例如【4，8，10，240】，
//         // 当元素为240的时候去和前面每一个元素相除，都是可以的，但是10 和其4，8元素就不符合要求
//         for(int i = 0; i < len; i++) {
//             List<Integer> temList = new ArrayList<>();
//             for(int j = 0; j <= i; j++) {
//                 if(nums[i] % nums[j] == 0) {
//                     temList.add(nums[j]);
//                 }
//             }
//             if(max < temList.size()) {
//                 max = temList.size();
//                 list = new ArrayList<>(temList);
//             }
//         }
//         return list;
//     }
// }

// 思路2: dp[i]表示当前位置i结尾的最大长度
// 但是需要记录当前位置i的前面可以被整除的元素位置j，所以需要一个last数组去记录当前位置i可以连接的最近元素位置
    public List<Integer> largestDivisibleSubset(int[] nums) {
            int len = nums.length;
            List<Integer> list = new ArrayList<>();
            if(nums == null || nums.length == 0) {
                return list;
            }
            Arrays.sort(nums);
            int[] dp = new int[len]; // dp[i] 表示前0到i-1个元素中最长以第i-1 个元素结尾的整除子集
            int[] last = new int[len];
            int max = 0, end = -1;
            // 初始化dp，由于每一元素到自己位置的长度为1，dp所有元素长度都为1
            for(int i = 0; i < len; i++) {
                dp[i] = 1;
                last[i] = -1;
            }

            for(int i = 0; i < len; i++) {
                for(int j = 0; j < i; j++) {
                    // dp[i]表示当前位置i结尾的最大长度
                    // 但是需要记录当前位置i的前面可以被整除的元素位置j，所以需要一个last数组去记录当前位置i可以连接的最近元素位置
                    if(nums[i] % nums[j] == 0 && dp[i] <= dp[j]) {
                        dp[i] = dp[j] + 1;
                        last[i] = j; // 位置i可以被整除的最近位置，例如【1 2 3 4】 第二层循环结束后位置4的最近可以被整除元素位置就位2，
                    }
                }
                if(max < dp[i]) {
                    max = dp[i];
                    end = i; // end记录着是拥有最大长度可以被整除元素位置，例如1 2 3 4 中4的可以被整除长度为124，那么此时i就位4所在下标
                }
            }
            // 根据last数组以及end在数组last中反向推元素
            // 当前位置i的前一个连续位置就是last[i] 存储的
            for(int i = end; i != -1; i = last[i]){
                list.add(0, nums[i]);
            }
            return list;
    }
}



55. 跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

// 思路：dp[i] 表示从i个位置是否可以跳到最后一个元素
// 当位置为i的时候，从i + 1开始判断是否可以跳过去，如果可以跳过去就记录为GOOD，
// i是从最后一个位置开始的，所以一旦检查可以跳过去后就标记为GOOD，当下一次遇到了直接使用
class Solution {
    enum index{
        GOOD, UNKNOWN
    }
    index[] dp;
    public boolean canJump(int[] nums) {
        if(nums == null) {
            return false;
        }
        dp = new index[nums.length]; 
        for(int i = 0; i < nums.length; i++) {
            dp[i] = index.UNKNOWN;
        }
        int len = nums.length - 1;
        dp[len] = index.GOOD;
        // helper(nums);
        for(int i = nums.length - 2; i >= 0; i--) {
            // 当在位置i的时候，最多可以跳动的位置；当i位置的可跳跃的数量大于最大可跳步数时候还是要按照数组最大长度减计算，不然会溢出
            int maxJumps = Math.min(i + nums[i], len); 
            for(int j = i + 1; j <= maxJumps; j++) {
                if(dp[j] == index.GOOD) {
                    dp[i] = index.GOOD;
                    // 不加break则每一个位置i都会去校验i到最后一个位置，是否可以跳过去
                    break;
                }
            }
        }
        return dp[0] == index.GOOD;
    }
}

