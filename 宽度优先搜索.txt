宽度有限搜索BFS

什么时候应该使用BFS? 图的遍历 Traversal in Graph
    1 层级遍历 Level Order Traversal
    2 由点及面 Connected Component
    3 拓扑排序 Topological Sorting
最短路径 Shortest Path in Simple Graph
    1 仅限简单图求最短路径
    2 即，图中每条边长度都是1，且没有方向

1，使用队列作为主要的数据结构 Queue
思考:用栈(Stack)是否可行?为什么行 or 为什么不行? 
2，是否需要实现分层?
3，需要分层的算法比不需要分层的算法多一个循环 size=queue.size()
如果直接 for (int i = 0; i < queue.size(); i++) 会怎么样?


69. 二叉树的层次遍历
给出一棵二叉树，返回其节点值的层次遍历（逐层从左往右访问）
样例
输入：{1,2,3}
输出：[[1],[2,3]]
解释：
   1
  / \
 2   3
它将被序列化为{1,2,3}
层次遍历

// 思路：从根节点开始先offer进队列中，然后poll出队列头部节点保存值临时list中，同时找到其左右子树存入队列
// ，记住：循环的次数是根据上一成节点数
public class Solution {
    /**
     * @param root: A Tree
     * @return: Level order a list of lists of integer
     */
    public List<List<Integer>> levelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null) {
            return result;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        // BFS标志语句while(!queue.isEmpty()), 
        // 同时注意int size = queue.size()必须要有，该变量记录了当前层所含节点数量
        while(!queue.isEmpty()){
            int size = queue.size();
            List<Integer> currentList = new ArrayList<>();
            for(int i = 0; i < size; i++) {
                TreeNode curNode = queue.poll();
                currentList.add(curNode.val);
                if(curNode.left != null) {
                    queue.offer(curNode.left);
                }
                if(curNode.right != null) {
                    queue.offer(curNode.right);
                }
            }
            result.add(currentList);
        }
        return result;
    }
}