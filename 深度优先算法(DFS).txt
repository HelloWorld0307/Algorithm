深度优先算法
立即深度优先算法中的递归，其中传入递归函数的一个临时list本来是什么样的，那么当层for循环之行完毕后临时list还是传入的样子，所以要添加一个remove操作，把上一部传入的值给remove掉
注意：“78题子集” 是一个基础，必须要把这个题弄懂透彻，代码要背住。

使用深度优先算法的条件：
 1，问题模型:求出所有满足条件的“组合”或者“排列”。
 2，判断条件:组合中的元素是顺序无关的。 
 3，时间复杂度:与 2^n 相关。

  一般都是可以使用递归
  递归三要素是实现递归的重要步骤:
   • 递归的定义 
   • 递归的拆解 
   • 递归的出口

78 给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。

说明：解集不能包含重复的子集。

示例:

输入: nums = [1,2,3]
输出:
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

思路： 使用深度优先算法，先一层一层的遍历，[] -->[1] -->[1,2]--> [1,2,3] 将3移除，那么在上层就是[1 ,2]了，接着把2移除，最后剩下1，然后继续往下for循环，到[1 ,3]这样以次遍历

class Solution {
    List<List<Integer>> result = new ArrayList<>();

    public List<List<Integer>> subsets(int[] nums) {
        if(nums.length == 0) {
            return result;
        }
        List<Integer> pre = new ArrayList<>();
        find(nums, 0, pre);
        return result;
    }

    private void find(int[] nums, int start, List<Integer> pre){
        result.add(new ArrayList<Integer>(pre)); // 这里不能直接把pre的引用放到result里面，因为每次传入到方法里的pre都是一个引用
        for(int i = start; i < nums.length; i++) {
            pre.add(nums[i]);
            find(nums, i + 1, pre);
            pre.remove(pre.size() - 1);
        }
    }
}


39，给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的数字可以无限制重复被选取。

说明：
所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]

// 思路：使用深度优先思想，拿结果target 分别和待选数组里面的每一个元素相减，差值再和待选数组中每一个元素相减；只保留最后的差值为0的结
//           要自己对着代码走一遍
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    private int[] candidates;

    private void find(int begin, int target, Stack<Integer> pre){
        if(target == 0) {
            result.add(new ArrayList<Integer>(pre));
            return;
        }
        // 继续往下深度递归的条件是未到数组最后一个，以及目标值 - 当前层元素值 >= 0才可以
        for(int i = begin; i < candidates.length; i++) {
            if(target - candidates[begin] < 0) {
                break;
            }
            // 当前题目数组中不包含重复元素，如果有重复元素，那么就要去重；如果当前元素和前面元素一样直接continue
            if(i != 0 && candidates[i] == candidates[i - 1]){
                continue;
            }

            pre.add(candidates[i]);
            find(i, target - candidates[i], pre);
            pre.pop();
        }
    }

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates.length == 0) {
            return result;
        }
        Arrays.sort(candidates);
        this.candidates = candidates;
        find(0, target, new Stack<Integer>());
        return result;
    }
}

131. 分割回文串
给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。
返回 s 所有可能的分割方案。

示例:

输入: "aab"
输出:
[
  ["aa","b"],
  ["a","a","b"]
]
// aab->a1a2b:三个字符有两个缝隙，所以可以转化为缝隙问题
// 例如：对缝隙【1，2】选择，可以对字符串进行多次切割，所以据转化为对缝隙的组合问题，选择方案有【1，2】，【1】，【2】 其中这
// 三种方案【1】不符合要求，切出来的结果为【a, ab】这不是回文串

class Solution {
    List<List<String>> result = new ArrayList<>();
    public List<List<String>> partition(String s) {
        if(s == null || s.length() == 0) {
            return result;
        }
        helper(s, 0, new ArrayList<String>());
        return result;
    }
    private void helper(String s, int startIndex, List<String> tempList){
        if(tempList.size() == s.length()) {
            result.add(new ArrayList<String>(tempList));
            return;
        }
        for(int i = startIndex; i < s.length(); i++) {
            String temString = s.substring(startIndex, i + 1);
            if(!isPartition(temString)){
                continue;
            }
            tempList.add(temString);
            helper(s, i + 1, tempList);
            tempList.remove(tempList.size() - 1);
        }
    }

    private boolean isPartition(String s) {
        for(int i = 0, j = s.length() - 1; i < j; i++, j-- ){
            if(s.charAt(i) != s.charAt(j)){
                return false;
            }
        }
        return true;
    }
}


46. 全排列
给定一个没有重复数字的序列，返回其所有可能的全排列。

示例:
输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

// 排列类的题目如果使用宽度优先算法会特别耗内存，因为需要保存每一层的数据

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> permute(int[] nums) {
        if(nums == null || nums.length == 0) {
            return result;
        }
        helper(nums, new ArrayList<Integer>());
        return result;
    }

    private void helper(int[] nums, List<Integer> tempList){
        if(tempList.size() ==  nums.length){
            result.add(new ArrayList<Integer>(tempList));
            return;
        }
        for(int i = 0; i < nums.length; i++) {
            if(tempList.contains(nums[i])){
                continue;
            }
            tempList.add(nums[i]);
            helper(nums, tempList);
            tempList.remove(tempList.size() - 1);
        }
    }
}