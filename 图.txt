
图的遍历(由点及面) 条件1:刚好N-1条边 条件2:N个点连通 
问:如何用基本数据结构表示一个图?

178. 图是否是树
给出 n 个节点，标号分别从 0 到 n - 1 并且给出一个 无向 边的列表 (给出每条边的两个顶点), 写一个函数去判断这张｀无向｀图是否是一棵树

样例
样例 1:

输入: n = 5 edges = [[0, 1], [0, 2], [0, 3], [1, 4]]
输出: true.
思路：解题条件1：所有点联通，条件2：图的变数 = 节点数 - 1，
     其实就是宽度优先搜索 + 图的存储

public class Solution {

    public boolean validTree(int n, int[][] edges) {
        // write your code here
        if (n == 0) {
            return false;
        }
        // 如果不满足变数 = 节点数 - 1直接返回false
        if (edges.length != n - 1) {
            return false;
        }
        Map<Integer, Set<Integer>> graph = initialGraph(n, edges);
        // 将二维数组转换为map类型的图后使用BFS处理
        Queue<Integer> queue = new LinkedList<>();
        Set<Integer> hash = new HashSet<>();
        
        // 因为节点是从0开始的所以0肯定是存在的
        queue.offer(0);
        // hash是用来记录已经访问过的节点
        hash.add(0);
        while(!queue.isEmpty()) {
            int size = queue.size();
            Integer cur = queue.poll();
            // 在map也就是graph中找多对应的key下个的set, 也就是当前cur节点的邻居
            for(Integer neighbor : graph.get(cur)) {
                if(hash.contains(neighbor)){ // 如果hash中已经保存neighbor节点直接跳过
                    continue;
                }
                queue.offer(neighbor);
                hash.add(neighbor);
            }
        }
        return (hash.size() == n);
    }
    
    // 图在数据库里面是以int[][]二维数组的形式存储，但是在内存中要将其转化为map类型，
    // 其中每个节点的所有邻居用一个Map<Integer, Set<Integer>>的形式表示
    public Map<Integer, Set<Integer>> initialGraph(int n, int[][] edges){
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        // 一共有 n 个节点，标号分别从 0 到 n - 1 ，所以需要将这个点都存入到map中
        for(int i = 0; i < n; i++) {
            graph.put(i, new HashSet<Integer>());
        }
        // 接下来找到每一个节点的邻居点，使用set存储，set特性是不能存储重复数值
        for(int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
	     // 由于是无向图所以是0是1的邻居，那么反过来也是的，两个互为邻居
            graph.get(u).add(v);     
            graph.get(v).add(u);
        }
        return graph; // 最后求得的graph里面包含每一个节点，而且每一个节点的邻居节点都存储在set里面
    }
}


137. 克隆图
克隆一张无向图. 无向图的每个节点包含一个 label 和一个列表 neighbors. 保证每个节点的 label 互不相同.

你的程序需要返回一个经过深度拷贝的新图. 新图和原图具有同样的结构, 并且对新图的任何改动不会对原图造成任何影响.

样例

输入:
{1,2,4#2,1,4#4,1,2}
输出: 
{1,2,4#2,1,4#4,1,2}
解释:
1------2  
 \     |  
  \    |  
   \   |  
    \  |  
      4   
思路：1，通过给定的node节点找到所有的节点
    2，使用map的特性，将复制一份新节点存储在map中，其中key值为旧节点，value值为新节点
    3，找到一一对应的关系后是用循环遍历，首先遍历旧节点的中每一个节点的邻居，通过找到的这些邻居去map中找到新节点，然后存储在当前节点的邻居中

public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
     // 题目要求：将一个图完全的复制一份出来，对复制的新图修改不会影响旧图
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if(node == null) {
            return null;
        }
        // 1，根据给定的node找到所有的node节点，这些node节点包括节点label 和 节点的邻居节点
       ArrayList<UndirectedGraphNode> nodes = getAllNodes(node);
       
       // 2, 将新旧点一一对应关系存储在一个Map<UndirectedGraphNode, UndirectedGraphNode>类型中
       Map<UndirectedGraphNode, UndirectedGraphNode> map = new HashMap<>();
       for(UndirectedGraphNode oldNode : nodes) {
           map.put(oldNode, new UndirectedGraphNode(oldNode.label));
       }
       // 3，新旧点一一对应后，循环遍历旧图中所有节点其邻居节点
       for(UndirectedGraphNode n:nodes) {
           UndirectedGraphNode newNode = map.get(n);
           // 当前的neighbor是旧图里面的，我需要找到这个旧neighbor节点在新的中的节点
           for(UndirectedGraphNode neighbor : n.neighbors) {
               UndirectedGraphNode newNeightbor = map.get(neighbor);
               newNode.neighbors.add(newNeightbor);
           }
       }
       // 4，返回题目给定的node节点在新的mapping对应关系中的位置
       return map.get(node);
    }
    
    // 像这种给定一个点求得所有的点的有点求面类题目，第一反应就是使用宽度优先搜索
    private ArrayList<UndirectedGraphNode> getAllNodes(UndirectedGraphNode node){
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        Set<UndirectedGraphNode> set = new HashSet<>();
        queue.offer(node);
        set.add(node);
        while(!queue.isEmpty()){
            UndirectedGraphNode cur = queue.poll();
            for(UndirectedGraphNode neighbor : cur.neighbors){
                if(!set.contains(neighbor)){
                    // 如果set里面没有cur节点说明，还未遍历过
                    queue.offer(neighbor);
                    set.add(neighbor);
                }
            }
        }
        return new ArrayList<UndirectedGraphNode>(set);
    }
}


127. 拓扑排序（针对的是有向无环图）
给定一个有向图，图节点的拓扑排序定义如下:

对于图中的每一条有向边 A -> B , 在拓扑排序中A一定在B之前.
拓扑排序中的第一个节点可以是图中的任何一个没有其他节点指向它的节点.
针对给定的有向图找到任意一种拓扑排序的顺序.

样例
The topological order can be:
[0, 1, 2, 3, 4, 5]
[0, 2, 3, 1, 5, 4]

// 思路：获取到图中每一个节点的入度，使用getInDegree方法获取的都是有入度的节点，查找哪个点在入度结果中不存在那么这个点就是出发点，
//     那么遍历这个点的所有邻居点，将其入度减一最后在判断其入度是否为0，如果为0则可以放大结果list中

public class Solution {

    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        
        // 1,找到每一个节点的入度，这里的result返回list都是入度不为零的节点
        ArrayList<DirectedGraphNode> result = new ArrayList<DirectedGraphNode>();
        Map<DirectedGraphNode, Integer> inDegree = getInDegree(graph);
        
        // 2,找到所有入度为0的节点，将其放在队列里--如果上一步返回的map中没有的节点就是入度为0的节点了
        Queue<DirectedGraphNode> queue = new LinkedList<>();
        for(DirectedGraphNode node : graph) {
            if(!inDegree.containsKey(node)){
                queue.offer(node);
                result.add(node);
            }
        }
        // 3,从队列里面拿出所有的节点，在队列里面的节点都是即将被写入结果map中的，这是需要找到所有的邻居
        //    节点，将这些邻居节点的入度减一，同时判断是否存在为如果为0的节点，如果是的入队列
        while(!queue.isEmpty()){
            DirectedGraphNode head = queue.poll();
            // 找到当前节点head的所有邻居，将其邻居的入度减一
            for(DirectedGraphNode neighbor : head.neighbors) {
                inDegree.put(neighbor, inDegree.get(neighbor) - 1);
                if(inDegree.get(neighbor) == 0){
                    queue.offer(neighbor);
                    result.add(neighbor);
                }
            }
        }
        return result;
    }
    
    // 有向图如果有A到B说明B是A的邻居，但是从B不到A说明B的neighbors里面没有A
    private Map<DirectedGraphNode, Integer> getInDegree(ArrayList<DirectedGraphNode> graph) {
        Map<DirectedGraphNode, Integer> result = new HashMap<>();
        for(DirectedGraphNode node : graph) {
            for(DirectedGraphNode neighbor : node.neighbors) {
                if(result.containsKey(neighbor)){
                    result.put(neighbor, result.get(neighbor) + 1);
                }else{
                    result.put(neighbor, 1);
                }
            }
        }
        return result;
    }
}

615. 课程表
现在你总共有 n 门课需要选，记为 0 到 n - 1.
一些课程在修之前需要先修另外的一些课程，比如要学习课程 0 你需要先学习课程 1 ，表示为[0,1]
给定n门课以及他们的先决条件，判断是否可能完成所有课程？

样例
例1:

输入: n = 2, prerequisites = [[1,0]] 
输出: true
例2:

输入: n = 2, prerequisites = [[1,0],[0,1]] 
输出: false

思路：这一题和上面一题其实差不多，只不过是给定的是一个二维数组，需要将其转化为一个map， 这一题和178类似

public class Solution {

    public boolean canFinish(int numCourses, int[][] prerequisites) {
        // 如果为空则直接返回true
        if(prerequisites.length == 0 || numCourses == 0){
            return true;
        }
        // 先将二维数组转为map，根据题意可以理解为有向图
        Map<Integer, List<Integer>> map = getGraphList(numCourses, prerequisites);
        
        // 接下来给每一个节点计算入度
        Map<Integer, Integer> indegreeMap = new HashMap<>();
        for(int i = 0; i < numCourses; i++ ) {
            for(Integer neighbor : map.get(i)){
                if(indegreeMap.containsKey(neighbor)){
                    indegreeMap.put(neighbor, indegreeMap.get(neighbor) + 1);
                }else {
                    indegreeMap.put(neighbor, 1);
                }
            }
        }
        //寻找入度为0的节点
        Queue<Integer> queue = new LinkedList<>();
        List<Integer> resultList = new ArrayList<>();
        
        for(int i = 0; i < numCourses; i++) {
            if(!indegreeMap.containsKey(i)){
                queue.offer(i);
                resultList.add(i);
            }
        }
        
        while(!queue.isEmpty()){
            Integer head =  queue.poll();
            for(Integer neighbor : map.get(head)) {
                indegreeMap.put(neighbor, indegreeMap.get(neighbor)-1);
                if(indegreeMap.get(neighbor) == 0){
                    resultList.add(neighbor);
                    queue.offer(neighbor);
                }
            }
        }
        
        return resultList.size() == numCourses;
        
    }
    
    // 返回一个以map形式存储的图
    private Map<Integer, List<Integer>> getGraphList(int num, int [][] prerequisites){
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int i = 0; i < num; i++) {
            map.put(i, new ArrayList<Integer>());
        }
        for(int j = 0; j < prerequisites.length; j++){
            int u = prerequisites[j][0];
            int v = prerequisites[j][1];
            map.get(u).add(v);
        }
        return map;
    }
}


605. 序列重构
判断是否序列 org 能唯一地由 seqs重构得出. org是一个由从1到n的正整数排列而成的序列，1 ≤ n ≤ 10^4。 重构表示组合成seqs的一个最短的父序列 (意思是，一个最短的序列使得所有 seqs里的序列都是它的子序列).
判断是否有且仅有一个能从 seqs重构出来的序列，并且这个序列是org。

样例
例1:
输入:org = [1,2,3], seqs = [[1,2],[1,3]]
输出: false
解释:
[1,2,3] 并不是唯一可以被重构出的序列，还可以重构出 [1,3,2]

例2:
输入: org = [1,2,3], seqs = [[1,2]]
输出: false
解释:
能重构出的序列只有 [1,2].

例3:
输入: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
输出: true
解释:
序列 [1,2], [1,3], 和 [2,3] 可以唯一重构出 [1,2,3].

例4:
输入:org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
输出:true

// 思路：二维数组seqs中存储的数据为为一个有向图，现在判断这个给定的序列org是不是可以从有向图序列化到
// 判断是否只存在一个拓扑排序的序列， 某一时刻整个图中只存在一个节点入度为0，
// 只需要保证队列中一直最多只有1个元素即可

public class Solution {
     
        public boolean sequenceReconstruction(int[] org, int[][] seqs) {
        // 二维数组转化为map
        Map<Integer, List<Integer>> graph = getGraph(seqs);
        // 获取到每一节点入度
        Map<Integer, Integer> indegree = getIndeGreed(graph);
        // 从返回的入度map中找到入读为0的节点放入队列中，其中队列的长度必须时刻不大于1
        Queue<Integer> queue = new LinkedList<>();
        for(Integer node : graph.keySet()){
            if(indegree.get(node) == 0){
                queue.offer(node);
            }
        }
        List<Integer> result = new ArrayList<>();
        while(!queue.isEmpty()){
            // 这里和其他的类型题目不一样的是，要时刻判断队列里面内容不能超过1
            if(queue.size() > 1){
                return false;
            }
            Integer head = queue.poll();
            result.add(head);
            for(Integer neighbor : graph.get(head)){
                indegree.put(neighbor, indegree.get(neighbor) - 1);
                if(indegree.get(neighbor) == 0){
                    queue.offer(neighbor);
                }
            }
        }
        if(org.length != result.size()){
            return false;
        }
        for (int i = 0; i < org.length; i++) {
            if (result.get(i) != org[i]) {
                return false;
            }
        }
        return true;
    }
    
    Map<Integer, List<Integer>> getGraph(int[][] seqs){
        Map<Integer, List<Integer>> map = new HashMap<>();
        for(int[] path : seqs){
            for(int node : path) {
                map.put(node, new ArrayList<Integer>());
            }
        }
        // 这里为啥不能用这种方法，因为当seq为一个[[]]的时候就会超过数组长度
        // for(int i = 0; i < seqs.length; i++) {
        //     Integer v = seqs[i][0];
        //     Integer u = seqs[i][1];
        //     map.get(v).add(u);
        // }
        for (int[] path : seqs) {
            for (int i = 0; i < path.length - 1; i++) {
                map.get(path[i]).add(path[i+1]);
            }
        }
        return map;
    }
    
    Map<Integer, Integer> getIndeGreed(Map<Integer, List<Integer>> target){
        Map<Integer, Integer> result = new HashMap<>();
        for(Integer node : target.keySet()){
            result.put(node, 0);
        }
        for(Integer key : result.keySet()){
            for(Integer neighbor : target.get(key)){
                result.put(neighbor, result.get(neighbor) + 1);
            }
        }
        return result;
    } 
}


主题：图是以二维数组的形式存储的解题思路
 坐标变换数组，顺序分别是：上下左右
int[] magicX = {-1, 1, 0, 0};
int[] magicY = {0, 0, -1, 1};

666：给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，
并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1

// 思路：循环遍历二维数组，遇到一个为1的节点就遍历其上下左右节点，同时标记这个点为已经遍历过（通过将其值置为0），
// 只要找到一个1就算是一个陆地，前提是要循环遍历这个1周围所有的点，将其周围所有为1的节点置为0，这样每次一次遍历就会将
// 将所有节点为1的区域遍历完毕
// 要点1，遍历上下左右的时候要判断其索引是否超过了界限，超过了就要continue


class Coordination{
    int x; 
    int y;
    public Coordination(int x, int y){
        this.x = x;
        this.y = y;
    }
}
class Solution {

    public int numIslands(char[][] grid) {
        if(grid == null || grid.length ==0 || grid[0].length == 0) {
            return 0;
        }

        int row = grid.length;
        int colum = grid[0].length;
        int island = 0;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < colum; j++) {
                // 循环遍历二维数组找到每一个为1的节点，然后对这个节点的上下左右节点判断是否为1 
                if(grid[i][j] == '1'){
                    contructIsland(i, j, grid);
                    island++;
                }
            }
        }
        return island;
    }

    private void contructIsland(int r, int c, char[][] grid){
        // 构建一个某一个节点上下左右的魔术数字
        int[] magicX = {-1, 1, 0, 0};
        int[] magicY = {0, 0, -1, 1};
        Queue<Coordination> queue = new LinkedList<>();
        queue.offer(new Coordination(r, c));
        grid[r][c] = '0';
        while(!queue.isEmpty()) {
        Coordination head = queue.poll();
        // 对值为1的节点的上下左右四个点寻找值为1邻居节点，修改为0，同时入队列
            for(int i = 0; i < 4; i++) {
                // 找到queue里面为1的节点去找他的
                int adjX = head.x + magicX[i]; // char[r][c] 的邻居节点x坐标
                int adjY = head.y + magicY[i];
                Coordination newCor = new Coordination(adjX, adjY);
                
                if(!outIndex(grid, newCor)){
                    continue;
                }
                if(grid[adjX][adjY] == '1'){
                    grid[adjX][adjY] = '0';
                    queue.offer(newCor);
                }
            }
        }
    }

    // 判断新节点的坐标是否超出了界限
    private boolean outIndex(char[][]grid, Coordination coor) {
        int xBound = grid.length;
        int yBound = grid[0].length;
        int coorX = coor.x;
        int coorY = coor.y;
        return coorX >= 0 && coorX < xBound && coorY >= 0 && coorY < yBound;
    }
}

127,给定两个单词（beginWord 和 endWord）和一个字典，找到从 beginWord 到 endWord 的最短转换序列的长度。转换需遵循如下规则：

每次转换只能改变一个字母。
转换过程中的中间单词必须是字典中的单词。
示例 1
输入:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

输出: 5
解释: 一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog",
     返回它的长度 5。

示例 2
输入:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

输出: 0
解释: endWord "cog" 不在字典中，所以无法进行转换。
// 思路：在worlList中找到所有符合beginWord下一个变身的单词，循环遍历这些单词是否等于endWord，接着使用宽搜思想从queue中poll出
// 当前长度size长度单词，然后接着对比，所有对比过的单词需要存放到set中，这样避免死循环。

// 题目意思：给单单词start 再给定的单词list中经过多少次可以变换到单词end，每次只能变化一个字母，
// 例如：a -> c在["a","b","c"]中，经过两步就可以了
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        if(beginWord.equals(endWord)){
            return 1;
        }
        if(wordList == null) {
            return 0;
        }
        if(!wordList.contains(endWord)) {
            return 0;
        }
        Queue<String> queue = new LinkedList<>();
        Set<String> hash = new HashSet<>();

        queue.offer(beginWord);
        hash.add(beginWord);
        int count = 1;
        while(!queue.isEmpty()) {
            count++;
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                String head = queue.poll();
                for(String nextWord : getNextWordList1(head, wordList)) {
                    if(hash.contains(nextWord)){
                        continue;
                    }
                    if(nextWord.equals(endWord)) {
                        return count;
                    }
                    hash.add(nextWord);
                    queue.offer(nextWord);
                }
            }
        }
        return 0;
    }

    // 这种办法是不会超时的，不能使用对每一单词都从a - z进行变化在list中查找，这样程序会超时
    private List<String> getNextWordList1(String target, List<String> wordList) {
        List<String> resultList = new ArrayList<>();
        for(String word : wordList){
            // 找出有两个字母不一样的单词
            int count = 0;
            for(int i = 0; i < target.length(); i++) {
                if(target.charAt(i) == word.charAt(i)){
                    count++;
                } 
            }
            if(count == (target.length() - 1)) {
                resultList.add(word);
            }
        }
        return resultList;
    }

}

323. 无向图中连通分量的数目
给定编号从 0 到 n-1 的 n 个节点和一个无向边列表（每条边都是一对节点），请编写一个函数来计算无向图中连通分量的数目。

示例 1:

输入: n = 5 和 edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

输出: 2
示例 2:

输入: n = 5 和 edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

     0           4
     |           |
     1 --- 2 --- 3

输出:  1

// 思路：遍历每个点的邻居节点，同时使用set记录下来点的访问状态，访问过后下次就不必再去遍历这个点
// 访问一个点就会把这个点的所有相关联的点找到，所以调用了几次bfsHelper就有几联通分量
// 时间复杂度：O(点数 + 边数)， 第一个for循环走的是所有的点，helper里面的for走的边
class Solution {
    public int countComponents(int n, int[][] edges) {
        if(n == 0 || edges == null) {
            return 0;
        }
        // 通过二维数组求得所有的节点的邻居节点
        Map<Integer, List<Integer>> graph = getGraph(n, edges);
        // 定义一个Set记录已经访问过的节点
        Set<Integer> set = new HashSet<>();
        int count = 0;
        for(int i = 0; i < n; i++){
            if(set.contains(i)){
                continue;
            }
            bfsHelper(i, graph, set);
            count++;
        }
        return count;
    }
    
    private void bfsHelper(int node, Map<Integer, List<Integer>> graph, Set<Integer> set) {
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(node);
        while(!queue.isEmpty()) {
            int cur =  queue.poll();
            set.add(cur);
            for(Integer neighbor : graph.get(cur)) {
                if(set.contains(neighbor)){
                    continue;
                }
                queue.offer(neighbor);
            }
        }
    }

    private Map<Integer, List<Integer>> getGraph(int n, int[][] edges) {
        Map<Integer, List<Integer>> result = new HashMap<>();
        for(int i = 0; i< n; i++) {
            result.put(i, new ArrayList<Integer>());
        }
        for(int i = 0; i < edges.length; i++) {
            int c = edges[i][0];
            int d = edges[i][1];
            result.get(c).add(d);
            result.get(d).add(c);
        }
        return result;
    }
}